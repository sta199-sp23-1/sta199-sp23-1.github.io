{
  "hash": "76cb582695724f5215ca695a639eac4c",
  "result": {
    "markdown": "---\ntitle: \"Lab 7 - Logistic regression\"\ncategories: \"Lab\"\nexecute:\n  eval: true\neditor: \n  markdown: \n    wrap: 80\n---\n\n\n::: callout-important\nThis lab is due Monday, March 27 at 5:00pm.\n:::\n\n## Packages\n\nYou'll need the following packages for today's lab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(dsbox)\n```\n:::\n\n\n## Data\n\nThe data can be found in the **dsbox** package, and it's called `gss16`. Since\nthe dataset is distributed with the package, we don't need to load it\nseparately; it becomes available to us when we load the package.\n\nIf you would like to explicitly load the data into your environment so you can\nview it, you can do so by running this code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss16 <- gss16\n```\n:::\n\n\nYou can find out more about the dataset by inspecting its documentation, which\nyou can access by running `?gss16` in the Console or using the Help menu in\nRStudio to search for `gss16`. You can also find this information\n[here](https://rstudio-education.github.io/dsbox/reference/gss16.html).\n\n# Exercises\n\n## Exercise 1 - Data wrangling\n\n::: callout-important\nRemember: For each exercise, you should choose one person to type. All others\nshould contribute to the discussion, but only one person should type up the\nanswer, render the document, commit, and push to GitHub. All others should\n**not** touch the document.\n:::\n\na)  Create a new data frame called `gss16_advfront` that includes the variables\n    `advfront`, `educ`, `polviews`, and `wrkstat`. Then, use the `drop_na()`\n    function to remove rows that contain `NA`s from this new data frame.\n\nb)  Transform the `advfront` variable such that it has two levels:\n    `\"Strongly agree\"` and `\"Agree\"` should both be mapped to `\"Agree\"` and the\n    remaining levels should all be relabeled `\"Not agree\"`. Make sure the\n    resulting levels are in the following order: `\"Agree\"` and `\"Not agree\"`.\n\nHint: use the `factor()` function inside a `mutate()` statement to relabel the\noriginal levels. Be sure to list the levels in order so that they are correctly\nordered after relabeling.\n\nc)  Similarly to part b, combine the levels of the `polviews` variable such that\n    levels that have the word \"liberal\" in them are lumped into a level called\n    `\"Liberal\"` and those that have the word \"conservative\" in them are lumped\n    into a level called `\"Conservative\"`. Make sure the levels are in the\n    following order: `\"Conservative\"` , `\"Moderate\"`, and `\"Liberal\"`. Finally,\n    `count()` how many times each new level appears in the `polviews` variable.\n\nHint: be careful if you manually type out the levels in the original `polviews`\nvariable to note that there are typos in two of the original levels \"slightly\nconservative\" and \"extremely conservative\" are both misspelled, and so you will\nneed to match those misspellings in your call to `factor()`.\n\n::: callout-important\nAfter the team member working on Exercise 1 renders, commits, and pushes, all\nother team members should pull. Then, choose a new team member to write the\nanswer to Exercise 2. (And so on for the remaining exercises.)\n:::\n\n## Exercise 2 - Train and test sets\n\nNow, let's split the data into training and test sets so that we can evaluate\nthe models we're going to fit by how well they predict outcomes on data that\nwasn't used to fit the models.\n\nSpecify a random seed of 1234 (i.e., include `set.seed(1234)` at the beginning\nof your code chunk), and then split `gss16_advfront` randomly into a training\nset `train_data` and a test set `test_data`. Do this so that the training set\ncontains 80% of the rows of the original data.\n\n## Exercise 3 - Logistic Regression\n\na)  Using the training data, fit a logistic regression model that predicts\n    `advfront` using `educ`. In particular, the model should predict the\n    probability that `advfront` has value `\"Not agree\"`. Name this model\n    `model1`. Report the tidy model output.\n\nb)  Write out the fitted model equation in proper notation. State the meaning of\n    any variables in the context of the data.\n\nc)  Using your fitted model, report the estimated probability of agreeing with\n    the following statement: Even if it brings no immediate benefits, scientific\n    research that advances the frontiers of knowledge is necessary and should be\n    supported by the federal government (`Agree` in advfront) if you have an\n    education of 7 years.\n\n## Exercise 4 - Another model\n\na)  Again using the training data, fit a new logistic regression model that adds\n    the additional explanatory variable of `polviews`. Name this model `model2`.\n    Report the tidy output.\n\nb)  Now, report the estimated probability of agreeing with the following\n    statement: Even if it brings no immediate benefits, scientific research that\n    advances the frontiers of knowledge is necessary and should be supported by\n    the federal government (`Agree` in advfront) if you have an education of 7\n    years and are Conservative.\n\n## Exercise 5 - Evaluating models with AIC\n\na)  Report the AIC values for each of `model1` and `model2`.\n\nb)  Based on your results in part a, does it appear that including political\n    views in addition to years of education is useful for modeling whether\n    employees agree with the statement \"Even if it brings no immediate benefits,\n    scientific research that advances the frontiers of knowledge is necessary\n    and should be supported by the federal government\"? Explain.\n\n## Exercise 6 - Evaluating models using test data\n\na)  For each of `model1` and `model2`, report the number of false positive and\n    false negatives when making predictions on the `test_data` with a decision\n    boundary of 0.5.\n\nb)  Do these results provide much information about which model you would prefer\n    for a prediction task? If so, which model would you choose?\n\nc)  Do you think a decision boundary of 0.5 makes sense here or would you adjust\n    it?\n\nThe ROC curve provides a way to compare predictive performance of binary\nclassifiers across the full range of decision boundaries. Notes about the ROC\ncurve can be found here <https://sta199-s23-2.github.io/ae-sa/ae-16-A.html>.\n\n# Submission\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your\nGitHub repo. We will be checking these to make sure you have been practicing how\nto render and push changes.\n\nYou must turn in a PDF file to the Gradescope page by the submission deadline to\nbe considered \"on time\". Only one team member should submit to Gradescope, but\nthey should add all other team members to the submission.\n\nMake sure your data are tidy! That is, your code should not be running off the\npages and spaced properly. See: <https://style.tidyverse.org/ggplot2.html>.\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right\n    corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your\n    NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with exercise. All the pages of your lab\n    should be associated with at least one question (i.e., should be \"checked\").\n    *If you do not do this, you will be subject to lose points on the\n    assignment.*\n-   *Select all* pages of your .pdf submission to be associated with the\n    *\"Workflow & formatting\"* question.\n\n# Grading\n\n| Component             | Points |\n|:----------------------|:-------|\n| Ex 1                  | 8      |\n| Ex 2                  | 3      |\n| Ex 3                  | 10     |\n| Ex 4                  | 5      |\n| Ex 5                  | 5      |\n| Ex 6                  | 14     |\n| Workflow & formatting | 5      |\n| **Total**             | 50     |\n\n::: callout-note\nThe \"Workflow & formatting\" grade is to assess the reproducible workflow. This\nincludes:\n\n-   linking all pages appropriately on Gradescope\n\n-   putting your team and member names in the YAML at the top of the document\n\n-   committing the submitted version of your `.qmd` to GitHub\n\n-   Are you under the 80 character code limit? (You shouldn't have to scroll to\n    see all your code). Pipes `%>%`, `|>` and ggplot layers `+` should be\n    followed by a new line\n\n-   You should be consistent with stylistic choices, e.g.Â only use 1 of `=` vs\n    `<-` and `%>%` vs `|>`\n\n-   All binary operators should be surrounded by space. For example `x + y` is\n    appropriate. `x+y` is not.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
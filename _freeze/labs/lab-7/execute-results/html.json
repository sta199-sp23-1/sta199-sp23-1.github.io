{
  "hash": "4cf95e2b3ef4591acebe3aaa071a3928",
  "result": {
    "markdown": "---\ntitle: \"Lab 7 - Confidence Intervals and Hypothesis Testing\"\nformat: html\nexecute:\n  eval: true\n---\n\n\n::: callout-important\nThis lab is due Monday, April 10th at 5:00pm.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\n```\n:::\n\n\nToday we will continue learning about hypothesis testing using the `chickwts` dataset that comes built in with `R`.\nFrom the dataset help file: \"An experiment was conducted to measure and compare the effectiveness of various feed supplements on the growth rate of chickens... Newly hatched chicks were randomly allocated into six groups, and each group was given a different feed supplement. Their weights in grams after six weeks are given along with feed types.\" We will evaluate the weight of statistical evidence that the various feed groups had significantly different expected weights.\n\n## Exercise 1 - Load and visualize the datasest\n\na.  Load the dataset into an environment variable so that tab-autocomplete functions will work more smoothly inside RStudio (i.e., run `chickwts <- chickwts`).\n    Then, use `ggplot` to make a boxplot for the `chickwts` data, with `weight` plotted on the x axis and the `feed` categorical variable on the y axis.\n    Make sure to give the plot an informative title and label the axes.\n\nb.  Based on the distributions visualized in the boxplot, does feed supplementation seem to have an effect on chick weight?\n\nc.  Another type of plot that is helpful for visualizing distributions of continuous variables (like `weight`) across levels of a categorical treatment (like `feed`) is called a *violin plot*.\n    Where the boxplot represents a distribution by stretching a box to match distribution quantiles, a violin plot represents each distribution with a smooth density estimate.\n    Recreate your plot from part (a) of this question, but replace `geom_boxplot` with `geom_violin` to see how this works.\n\n## Exercise 2 - Data wrangling\n\na.  Compute and report the number of chicks in each feed group.\n    We should find this matches our output from part b, below.\n\nb.  We plan to compare the weight of the chicks from each feed group.\n    This will be more convenient if, rather than a two column dataframe, we have a list of vectors, each of which contains the weight of chicks in a specific feed group.\n    A convenient way to do this is by using the `split` function, available in base `R`.\n    Run the following code to create a list of vectors, each of which contains observations from a specific feed group `weight_vecs <- split(chickwts$weight, chickwts$feed)`.\n    Then, run `sapply(weight_vecs, length)` to print the length of each vector to the console.\n\n::: callout-important\nNote for later exercises: Now, you should be able to access the vector of weights for chicks in a specific feed group by running, for example, `weight_vecs[[\"linseed\"]]` or, equivalently, `weight_vecs$linseed`.\n:::\n\n## Exercise 3 - Single comparison\n\nNow, we will perform our first hypothesis test.\nWe would like to evaluate the evidence that the sunflower feed group has an expected weight that is significantly different from that of the meatmeal group.\nThus, our null hypothesis must be that the sunflower group's expected weight is no different than that of the meatmeal group.\n\na.  Denoting the expected weights of the sunflower group and the meatmeal group as $\\mu_{s}$ and $\\mu_m$, respectively, state our null and alternative hypothesis in formal mathematical notation.\n\nb.  Compute the sample means for the sunflower feed group and the meatmeal feed group and report them, along with their difference (sunflower group mean minus the meatmeal group mean).\n\nc.  To quantify the evidence *against* the null hypothesis, we estimate the probability that, if the null hypothesis were true, we would have observed a difference in means as large or larger than what we observed in part b.\n    This \"tail probability\" is called the *p-value* associated with the difference in means we computed.\n    We will draw on the ideas for simulation based inference you have been learning in class to estimate this p-value.\n\nFirst, we make our null hypothesis slightly more specific - under the null hypothesis, we suppose that all observations were drawn independently from a common distribution with a fixed mean.\nIf this were true, then the exact sequence of the observations would be irrelevant.\nBy repeatedly permuting the sequence of weight observations (specifically, which weights are associated with which feed), and recomputing the difference in means each time, we are able to (approximately) create draws from the sampling distribution of the difference statistic under the null hypothesis.\n\nTemplate code to generate samples from the null distribution using the permutation approach is provided below, making use of the `tidymodels` package.\nUsing this, compute the proportion of samples under the null for which the absolute value of the difference exceeds that of the observed difference from part b.\nThat number is the estimated p-value for the difference we observed.\n\n**Make sure you also use the seed and the same value for `reps` so that our numerical answers agree moving forward.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_dist <- chickwts %>% \n  filter(feed %in% c(\"sunflower\", \"meatmeal\")) %>%\n  mutate(feed = droplevels(feed)) %>%\n  specify(response = weight, explanatory = feed) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 5000, type = \"permute\") %>%\n  calculate(stat = \"diff in means\", order = c(\"sunflower\", \"meatmeal\"))\n```\n:::\n\n\n## Exercise 4 - Evaluating evidence and multiple testing\n\nFrom a scientific (and often practical perspective), we rarely want to \"reject\" the null hypothesis when it is in fact true - that is called a Type 1 error.\nIn this case, we don't want to claim sunflower feed leads to higher expected chick weight if in fact it does not.\nSo we want to set a bar high enough that we should rarely incur type 1 error.\n\nScientists will often decide in advance what is an acceptable false positive rate.\nIn many situations, by convention, the threshold of requiring p-values below 0.05 is adopted.\n\na.  Suppose a scientist performs 100 experiments in a row. In each experiment, they collect several measurements which are noisy observations of some true effect size. Then, they compute the sample mean for the observations within each experiment. If all of the effect sizes were, in reality, 0, in roughly how many of the experiments would the scientist expect to find a p-value of less than 0.05?\n\nThe phenomenon described in part a is called p-hacking.\nThe idea is that, by design, a \"significance threshold\" of level $\\alpha$ will mean that, even if we only conduct experiments for which the null hypothesis is always true, we will expect to reject the null with probability $\\alpha$.\nThus, if you simply conduct enough experiments then eventually you will have \"significant\" findings even if the true effect is nonexistent.\n\nb.  Suppose we would like to compare all pairs of feed groups to test for differences in expected weight.\n    There are 6 types of feed, so there are $6*5/2 = 15$ pairs we could compare.\n    If we reject the null hypothesis for any p-value less than or equal to 0.05, and we assume the p-values are independent for each pair, and we also assume the null is true for every comparison, what is the probability that we don't reject the null for any of the pairs?\n    *Hint: probabilities for independent events multiply.*\n\nc.  Based on your answer in part b, if we compared all 15 pairs of feeds for differences in expected weight, assuming the p-values are independent for each pair, what is the probability that we will make a type 1 error (i.e., the probability that we *do* reject the null for at least one pair)?\n    *Hint: probabilities of complementary events add to 1.*\n\n## Exercise 5 - Bonferroni Correction\n\nIf the probability of event $A$ is $p_1$ and the probability of event $B$ is $p_2$, the *largest possible probability for the event of either* $A$ or $B$ happening is $p_1 + p_2$.\nHence, in the worst possible case, if we perform a series of tests $T_1, \\dots, T_k$ calibrated to have type 1 error probabilities $p_1, \\dots, p_k$, the largest possible probability that at least one of the tests results in a type 1 error is $p_1 + \\dots + p_k$.\nIf all of the tests have a common type 1 error probability $p'$, then this value will equal $kp'$.\n\na.  If we were to perform all pairwise tests for the `chickwts` dataset, what p-value threshold must we use if we want to ensure the probability that any of the tests leads to a type 1 error is less than 0.05?\n\nThis \"higher bar\" for p-values in multiple testing situations is called the Bonferroni correction.\n\nb.  I will spare you from performing all possible pairwise comparisons. However, you can see from the plots in exercise 1 that the difference in sample means between the sunflower and horsebean groups will likely be the greatest of any pair in the dataset. If we began our experiment with no particular hypothesis and choose to formally compare these two groups based on a visualization, we are *implicitly performing multiple testing* by pre-screening out all pairs which do not have an obvious visual difference, thus we should impose a higher bar on the evidence for rejecting our null if we wish to maintain a low type 1 error rate overall. Is that pair significantly different if we use the Bonferroni-corrected threshold from part (a) above? *Hint: feel free to re-use the example code from exercise 3(c), with the necessary modifications.*\n\n## Submission\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo.\nWe will be checking these to make sure you have been practicing how to render and push changes.\n\nYou must turn in a PDF file to the Gradescope page by the submission deadline to be considered \"on time\".\n\nMake sure your data are tidy!\nThat is, your code should not be running off the pages and spaced properly.\nSee: <https://style.tidyverse.org/ggplot2.html>.\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with exercise. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\"). *If you do not do this, you will be subject to lose points on the assignment.*\n-   Select all pages of your .pdf submission to be associated with the *\"Workflow & formatting\"* question.\n\n# Grading\n\n| Component             | Points |\n|:----------------------|:-------|\n| Ex 1                  | 11     |\n| Ex 2                  | 11     |\n| Ex 3                  | 6      |\n| Ex 4                  | 11     |\n| Ex 5                  | 6      |\n| Workflow & formatting | 5      |\n| **Total**             | 50     |\n\n::: callout-note\nThe \"Workflow & formatting\" component assesses the reproducible workflow.\nThis includes:\n\n-   having at least 3 informative commit messages\n-   labeling the code chunks\n-   having readable code that does not exceed 80 characters, i.e., we can read all your code in the rendered PDF\n-   each team member contributing to the repo with commits at least once\n-   the issue being closed with a commit message\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
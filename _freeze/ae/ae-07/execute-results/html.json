{
  "hash": "c2d5425ada947ead09f971dfa2340e98",
  "result": {
    "markdown": "---\ntitle: \"Data types and classes\"\nsubtitle: \"STA 199\"\neditor: source\nformat: html\n---\n\n\n## Bulletin\n\n-   this `ae` is due for grade (48 hours from class). To turn in, simply push to GitHub\n-   [homework 01](/hw/hw-1.html) due today at 5:00pm\n\n## Getting started\n\nClone *your* `ae7-username` repo from the [GitHub organization](https://github.com/sta199-sp23-1/).\n\n## Today\n\nBy the end of today you will...\n\n-   learn how to check the type of a variable\n-   utilize factors\n\n## Load packages\n\nWe will use the following two packages in this application exercise.\n\n-   **tidyverse**: For data import, wrangling, and visualization.\n-   **scales**: For better axis labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\n```\n:::\n\n\n## Notes\n\nA *type* is how an object is stored in memory.\nIn this course we'll encounter the following types:\n\n-   numeric types:\n    -   double: a real number stored in double-precision floating point format\n    -   integer\n-   character strings\n-   logical (TRUE/FALSE)\n-   lists (a heterogeneous collection of the above)\n-   `NULL`\n\nSome objects have additional metadata associated with them, called a *class*.\nOne popular example of a class is a factor.\nR stores categorical variables as factors.\n\n### Example factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = factor(c(\"Monday\", \"Friday\", \"Wednesday\"))\nstr(x) # look at the structure of x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 3 levels \"Friday\",\"Monday\",..: 2 1 3\n```\n:::\n\n```{.r .cell-code}\nattributes(x) # see metadata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n[1] \"Friday\"    \"Monday\"    \"Wednesday\"\n\n$class\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\nlevels(x) # look at levels of a factor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Friday\"    \"Monday\"    \"Wednesday\"\n```\n:::\n:::\n\n\nThe levels of a factor default to alphabetical order but you can change the order of the levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(x) = c(\"Monday\", \"Wednesday\", \"Friday\")\nlevels(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Monday\"    \"Wednesday\" \"Friday\"   \n```\n:::\n:::\n\n\n## Type coercion\n\n-   **Demo:** Determine the type of the following vector.\n    And then, change the type to numeric.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x = c(\"1\", \"2\", \"3\")\n    typeof(x)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"character\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    as.numeric(x)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 1 2 3\n    ```\n    :::\n    :::\n\n\n-   **Demo:** Once again, determine the type of the following vector.\n    And then, change the type to numeric.\n    What's different than the previous exercise?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    y = c(\"a\", \"b\", \"c\")\n    \n    # add code here\n    ```\n    :::\n\n\n-   **Demo:** Once again, determine the type of the following vector.\n    And then, change the type to numeric.\n    What's different than the previous exercise?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    z = c(\"1\", \"2\", \"three\")\n    \n    # add code here\n    ```\n    :::\n\n\n-   **Demo:** Suppose you conducted a survey where you asked people how many cars their household owns collectively.\n    And the answers are as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_results = tibble(cars = c(1, 2, \"three\"))\nsurvey_results\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n  cars \n  <chr>\n1 1    \n2 2    \n3 three\n```\n:::\n:::\n\n\nThis is annoying because of that third survey taker types a character string instead of providing a numeric value.\nSo now you need to update the `cars` variable to be numeric.\nYou do the following\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_results |>\nmutate(cars = as.numeric(cars))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n   cars\n  <dbl>\n1     1\n2     2\n3    NA\n```\n:::\n:::\n\n\nNow you get a warning `NAs introduced by coercion` that happened while computing `cars = as.numeric(cars)` and the response from the third survey taker is now an `NA` (you lost their data).\nFix your `mutate()` call to avoid this warning.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_results |>\n  mutate(cars = if_else(cars == \"three\", \"3\", cars),\n         cars = as.numeric(cars))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n   cars\n  <dbl>\n1     1\n2     2\n3     3\n```\n:::\n:::\n\n\n#### Exercise 1\n\nFirst, guess the type of the vector.\nThen, check if you guessed right.\nI've done the first one for you, you'll see that it's helpful to check the type of each element of the vector first.\n\n-   `c(1, 1L, \"C\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 = c(1, 1L, \"C\")\n\n# to help you guess\ntypeof(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(\"C\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# to check after you guess\ntypeof(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nv2 = c(1L / 0, \"A\")\n```\n:::\n\n\n    -   `c(1:3, 5)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv3 = c(1:3, 5)\n```\n:::\n\n\n    -   `c(3, \"3+\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv4 = c(3, \"3+\")\n```\n:::\n\n\n    -   `c(NA, TRUE)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv5 = c(NA, TRUE)\n```\n:::\n\n\n## Useful coercion\n\n#### Exercise 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(mpg)\n```\n:::\n\n\nRecreate the plot below.\nMake sure axes and title labels are exactly matching, including spelling, capitalization, etc.\n\n::: callout-tip\n## Hint\n\nYou will need to use `as.factor()` to cast the appropriate variable as a factor.\n:::\n\n![](images/mpgImage.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n\n\n## Hotel bookings\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# From TidyTuesday: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md\n\nhotels = read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n```\n:::\n\n\n#### Exercise 3\n\nTake a look at the the following visualization.\nHow are the months ordered?\nWhat would be a better order?\n\n![](images/hotel-prices-months.png){fig-align=\"center\"}\n\nReorder the months on the x-axis (levels of `arrival_date_month`) in a way that makes more sense.\nUse the `factor()` function to mutate the column into a factor.\nRead `?factor` for help.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotels |>\n  group_by(hotel, arrival_date_month) |>   # group by hotel type and arrival month\n  summarise(mean_adr = mean(adr), .groups = \"drop\") |>       # calculate mean adr for each group\n  ggplot(aes(\n    x = arrival_date_month,                 # x-axis = arrival_date_month\n    y = mean_adr,                           # y-axis = mean_adr calculated above\n    group = hotel,                          # group lines by hotel type\n    color = hotel)                          # and color by hotel type\n  ) +\n  geom_line() +                             # use lines to represent data\n  theme_minimal() +                         # use a minimal theme\n  labs(\n    x = \"Arrival month\",                 # customize labels\n    y = \"Mean ADR (average daily rate)\",\n    title = \"Comparison of resort and city hotel prices across months\",\n    subtitle = \"Resort hotel prices soar in the summer while ciry hotel prices remain relatively constant throughout the year\",\n    color = \"Hotel type\"\n  ) \n```\n:::\n\n\n**Optional extra:** Change the y-axis label so the values are shown with dollar signs, e.g. \\$80 instead of 80.\nYou will want to use a function from the **scales** package, see <https://scales.r-lib.org/reference/index.html> for inspiration and help.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
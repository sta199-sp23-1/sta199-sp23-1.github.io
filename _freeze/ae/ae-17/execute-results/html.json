{
  "hash": "80832034a097519ef311cacb9077fbe2",
  "result": {
    "markdown": "---\ntitle: \"Prediction\"\nsubtitle: \"STA 199\"\neditor: source\nformat: html\nexecute:\n  error: true\n---\n\n\n## Bulletin\n\n-   this `ae` is **due for grade**. Push your completed ae to GitHub within 48 hours to receive credit\n-   final project proposal due today at 5:00pm\n- statistics experience homework released\n    - today is last day to register for [datafest](https://dukestatsci.github.io/datafest/). \n\n## Getting started\n\nClone *your* `ae17-username` repo from the [GitHub organization](https://github.com/sta199-sp23-1/).\n\n\n## Today\n\nBy the end of today you will...\n\n- be able to make new predictions from your fitted linear models\n- visualize the fit of your model\n\n## Load packages and data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\n```\n:::\n\n\n## Notes\n\n### Prediction\n\n`predict()` is a powerful function that takes two arguments:\n\n1. your model fit\n2. new data you want to make predictions from\n\nThere are several ways you can use the `predict()` function. \n\nFor standard linear regression,\n\n```\npredict(model_fit, test_data) # returns predicted outcome\n```\n\nFor logistic regression you can use the code above to obtain the predicted outcome (0 or 1) or alternatively use one of the formulations below to quickly grab the log-odds or the probability of the outcome \"1\".\n\n```\npredict(model_fit$fit, test_data) # returns log-odds\n```\n\n```\npredict(model_fit, test_data, type = \"prob\") # returns probability of a 1.\n```\n\n## Practice\n\nLoad data:\n\n::: {.cell}\n\n```{.r .cell-code}\nparkinsons_train = read_csv(\"https://sta101-fa22.netlify.app/static/appex/data/parkinsons_train.csv\")\nparkinsons_test = read_csv(\"https://sta101-fa22.netlify.app/static/appex/data/parkinsons_test.csv\")\n```\n:::\n\n\n\nThis dataset comes from [Little et al. (2008)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3051371/). The data includes various measurements of dysphonia (disorders of the voice) from 32 people, 24 with Parkinson's disease (PD). Multiple measurements were taken per individual. The measurements we examine in this subset of the data include: \n\n- `name`: patient ID\n- `jitter`: a measure of relative variation in fundamental frequency\n- `shimmer`: a measure of variation in amplitude (dB)\n- `PPE`: pitch period entropy\n- `HNR`: a ratio of total components vs. noise in the voice recording\n- `status`: health status (1 for PD, 0 for healthy)\n\n\n#### Exercise 1 \n\nWrite down a main effects model to predict Parkinson's `status` from `HNR`, `shimmer`, `jitter` and `PPE`. \n\n\n#### Exercise 2 \n\nFit your model from the previous exercise using the `parkinsons_train` data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n\n#### Exercise 3 \n\nUse your model to predict PD status in the `parkinsons_test` data set with a decision boundary of `p = 0.5`. How many false positives do you observe? How many false negatives?\n\nNext change the decision boundary to 0.25. How many false positives and false negatives do you observe?\n\nWhich decision boundary do you prefer?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n\n### Visualizing model fits\n\nThere are many ways you can visualize a fitted model. Plotting the hyperplane is limited to simple two-variable (predictor, outcome) and three-variable (predictor, predictor, outcome) plots. Here we explore some useful visualizations for high-dimensional multivariate models.\n\n\n#### Example: logistic regression\n\n- Create a stacked bar plot with `status` on the x-axis and fill by whether or not the predicted status is correct or incorrect.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n\n#### Example: ordinary least squares regression:\n\nScenario: we are trying to predict vocal amplitude variation (`shimmer`) from `jitter` and pitch period entropy (`PPE`).\n\n\n$$\ny = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\epsilon\n$$\n\nwhere \n\n$y$: `shimmer`\n$x_1$: `jitter`\n$x_2$: `PPE`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyPredictiveModel = linear_reg() %>%\n  set_engine(\"lm\") %>%\n  fit(shimmer ~ jitter + PPE, data = parkinsons_train)\n```\n:::\n\n\nEven if we don't have a test data set, we could still create a new column of predictions like before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# predict based on new data\npredict_train = parkinsons_train %>%\n  mutate(myPrediction = predict(myPredictiveModel, parkinsons_train)$.pred)\n```\n:::\n\n\nFrom here we can plot $\\hat{y}$ vs $y$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_train %>%\n  ggplot(aes(x = shimmer, y = myPrediction)) +\n  geom_point() +\n  labs(x = \"True Shimmer (dB)\", y = \"Predicted shimmer (dB)\", title = \"Predicted vs true shimmer values\") +\n  geom_abline(slope = 1, intercept = 0, color = \"steelblue\")\n```\n\n::: {.cell-output-display}\n![](ae-17_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAlternatively, we could create a **residual plot**. Residual plots can be used to assess whether a linear model is appropriate.\n\nA common assumption of linear regression models is that the error term, $\\epsilon$, has constant variance everywhere.\n\n- If the linear model is appropriate, a residual plot should show this.\n\n- Patterned or nonconstant residual spread may sometimes be indicative a model is missing predictors or missing interactions.\n\n#### Exercise 4\n\nCreate a new column `residuals` in `predict_train` and save your data frame as `predict_train_2`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_train_2 %>%\n  ggplot(aes(x = myPrediction, y = residuals)) + \n  geom_point() +\n  geom_hline(yintercept = 0) +\n  labs(x = \"Predicted shimmer (dB)\", y = \"Residual\")\n```\n:::\n",
    "supporting": [
      "ae-17_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
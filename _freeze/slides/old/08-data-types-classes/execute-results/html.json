{
  "hash": "a7a96f3a3641d7ea67c4299dfc8b4cf5",
  "result": {
    "markdown": "---\ntitle: \"Data types and classes\"\nsubtitle: \"Lecture 8\"\ndate: \"September 22, 2022\"\nformat: revealjs\n---\n\n\n# Warm up\n\n\n::: {.cell}\n\n:::\n\n\n## While you wait for class to begin...\n\n-   Open your `ae-05` project (from last time) in RStudio, render your document, and commit and push. Make sure you have your \"first draft\" plot ready to go.\n-   Any questions from prepare materials? Go to [slido.com](https://www.slido.com/) / #sta199. You can also upvote others' questions.\n\n## Announcements {.smaller}\n\n-   HW 2 due tonight (11:59 pm)\n\n-   Lab 2 due tomorrow night (11:59 pm)\n\n## Review: Logical operators {.smaller}\n\n::: columns\n::: {.column width=\"45%\"}\n|          |                                          |\n|----------|------------------------------------------|\n| `x < y`  | test if `x` less than `y`                |\n| `x <= y` | test if `x` less than or equal to `y`    |\n| `x > y`  | test if `x` greater than `y`             |\n| `x >= y` | test if `x` greater than or equal to `y` |\n| `x == y` | test if `x` is equal to `y`              |\n| `x != y` | test if `x` is not equal to `y`          |\n\n: {tbl-colwidths=\"\\[30, 70\\]\"}\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n|               |                           |\n|---------------|---------------------------|\n| `is.na(x)`    | test if `x` is `NA`       |\n| `!is.na(x)`   | test if `x` is not `NA`   |\n| `x %in% y`    | test if `x` is in `y`     |\n| `!(x %in% y)` | test if `x` is not in `y` |\n| `!x`          | test for not `x`          |\n| `x & y`       | test for `x` and y        |\n| `x | y`       | test for `x` or y         |\n\n: {tbl-colwidths=\"\\[30, 70\\]\"}\n:::\n:::\n\n## Question from last time\n\n-   What is the difference between `is.na()` and `na.rm`?\n\n`is.na()` checks for `NA`s and returns `TRUE` or `FALSE` -- it's a function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, NA)\nis.na(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n:::\n\n\n`na.rm` **r**e**m**oves `NA`s before applying a function -- it's an argument in a function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmean(x, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.5\n```\n:::\n:::\n\n\n# From last time\n\n## Continue from last time: `ae-05`\n\n::: appex\n-   Go to your container and open your `ae-05` project.\n-   Render, commit, and push before getting started again.\n:::\n\n## Recap of AE {.smaller}\n\n-   Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format\n-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.\n-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.\n\n# Types and classes\n\n## Types and classes\n\n-   Type is how an object is stored in memory, e.g.,\n\n    -   `double`: a real number stored in double-precision floatint point format.\n    -   `integer`: an integer (positive or negative)\n\n-- Class is metadata about the object that can determine how common functions operate on that object, e.g.,\n\n-   `factor`\n\n## Types of vectors\n\n::: columns\n::: {.column width=\"50%\"}\nYou'll commonly encounter:\n\n-   `logical`\n-   `integer`\n-   `double`\n-   `character`\n:::\n\n::: {.column width=\"50%\"}\nYou'll less commonly encounter:\n\n-   `list`\n-   `NULL`\n-   `complex`\n-   `raw`\n:::\n:::\n\n## Types of functions\n\nYes, functions have types too, but you don't need to worry about the differences in the context of doing data science.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(mean) # regular function\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"closure\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(`$`) # internal function\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"special\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(sum) # primitive function\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"builtin\"\n```\n:::\n:::\n\n\n## Factors\n\nA `factor` is a vector that can contain only predefined values.\nIt is used to store categorical data.\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] a b b a\nLevels: a b\n```\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n[1] \"a\" \"b\"\n\n$class\n[1] \"factor\"\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/08/factor.png){fig-align=\"center\" width=\"400\"}\n:::\n:::\n\n## Other classes\n\nJust a couple of examples...\n\n::: columns\n::: {.column width=\"50%\"}\nDate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday <- Sys.Date()\ntoday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-01-17\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nattributes(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$class\n[1] \"Date\"\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nDate-time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnow <- as.POSIXct(\"2022-09-22 10:15\", tz = \"EST\")\nnow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-09-22 10:15:00 EST\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nattributes(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"EST\"\n```\n:::\n:::\n\n:::\n:::\n\n# Application exercise\n\n::: appex\n-   Go to the course [GitHub org](https://github.com/sta199-f22-1) and find your `ae-06` (repo name will be suffixed with your GitHub name).\n-   Clone the repo in your container, open the Quarto document in the repo, and follow along and complete the exercises.\n-   Render, commit, and push your edits by the AE deadline -- 3 days from today.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
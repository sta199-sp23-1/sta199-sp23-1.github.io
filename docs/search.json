[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STA 199: Introduction to Data Science",
    "section": "",
    "text": "week\n      dow\n      date\n      what\n      topic\n      prepare\n      slides\n      ae\n      hw\n      lab\n      exam\n      project\n      notes\n    \n  \n  \n    1\nW\nJan 11\nLab 0\nHello R!\n\n\n\n\n\n\n\n\n    \nF\nJan 13\nLec 1\nWelcome to STA 199\n\n\n\n\n\n\n\n\n    2\nM\nJan 16\n\nNo class -- Martin Luther King Jr. Day\n\n\n\n\n\n\n\n\n    \nW\nJan 18\nLec 2\nIntro to statistics and plotting\n\n\n\n\n\n\n\n\n    \nF\nJan 20\nLec 3\nVisualizing various types of data\n\n\n\n\n\n\n\n\n    3\nM\nJan 23\nLab 1\nData visualization\n\n\n\n\n\n\n\n\n    \nW\nJan 25\nLec 4\nGrammar of data wrangling\n\n\n\n\n\n\n\nHomework 1 released\n    \nF\nJan 27\nLec 5\nWorking with multiple data frames\n\n\n\n\n\n\n\n\n    4\nM\nJan 30\nLab 2\nData wrangling\n\n\n\n\n\n\n\n\n    \nW\nFeb 1\nLec 6\nTidy data\n\n\n\n\n\n\n\n\n    \nF\nFeb 3\nLec 7\nData types and classes\n\n\n\n\n\n\n\nHomework 1 due\n    5\nM\nFeb 6\nLab 3\nData tidying\n\n\n\n\n\n\n\n\n    \nW\nFeb 8\nLec 8\nSpatial data\n\n\n\n\n\n\n\n\n    \nF\nFeb 10\nLec 9\nTroubleshooting / Review\n\n\n\n\n\n\n\nExam 01 released! Due Feb 14 5:00pm\n    6\nM\nFeb 13\nLab\nNo lab: exam 1\n\n\n\n\n\n\n\n\n    \nW\nFeb 15\nLec 10\nIntro to probability\n\n\n\n\n\n\n\n\n    \nF\nFeb 17\nLec 11\nConditional probability\n\n\n\n\n\n\n\n\n    7\nM\nFeb 20\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nFeb 22\nLec 12\nSimple regression\n\n\n\n\n\n\n\n\n    \nF\nFeb 24\nLec 13\nMultiple regression I\n\n\n\n\n\n\n\n\n    8\nM\nFeb 27\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nMar 1\nLec 14\nMultiple regression II\n\n\n\n\n\n\n\n\n    \nF\nMar 3\nLec 15\nModel selection\n\n\n\n\n\n\n\n\n    9\nM\nMar 6\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nMar 8\nLec 16\nLogistic Regression\n\n\n\n\n\n\n\n\n    \nF\nMar 10\nLec 17\nPrediction\n\n\n\n\n\n\n\n\n    10\nM\nMar 13\n\nNo class -- Spring Break\n\n\n\n\n\n\n\n\n    \nW\nMar 15\n\nNo class -- Spring Break\n\n\n\n\n\n\n\n\n    \nF\nMar 17\n\nNo class -- Spring Break\n\n\n\n\n\n\n\n\n    11\nM\nMar 20\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nMar 22\nLec 18\n\n\n\n\n\n\n\n\n\n    \nF\nMar 24\nLec 19\n\n\n\n\n\n\n\n\n\n    12\nM\nMar 27\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nMar 29\nLec 20\n\n\n\n\n\n\n\n\n\n    \nF\nMar 31\nLec 21\n\n\n\n\n\n\n\n\n\n    13\nM\nApr 3\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nApr 5\nLec 22\n\n\n\n\n\n\n\n\n\n    \nF\nApr 7\nLec 23\n\n\n\n\n\n\n\n\n\n    14\nM\nApr 10\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nApr 12\nLec 24\n\n\n\n\n\n\n\n\n\n    \nF\nApr 14\nLec 25\n\n\n\n\n\n\n\n\n\n    15\nM\nApr 17\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nApr 19\nLec 26\n\n\n\n\n\n\n\n\n\n    \nF\nApr 21\nLec 27\n\n\n\n\n\n\n\n\n\n    16\nM\nApr 24\nLab\n\n\n\n\n\n\n\n\n\n    \nW\nApr 26\nLec 28"
  },
  {
    "objectID": "ae/ae-01.html",
    "href": "ae/ae-01.html",
    "title": "Welcome to R",
    "section": "",
    "text": "By the end of today you will…\n\nbegin to know your way around RStudio\nbe able to define package, data frame, variable, function, argument\nuse the function glimpse()"
  },
  {
    "objectID": "ae/ae-01.html#getting-started",
    "href": "ae/ae-01.html#getting-started",
    "title": "Welcome to R",
    "section": "Getting started",
    "text": "Getting started\nClone the ae1 repo from the GitHub organization"
  },
  {
    "objectID": "ae/ae-01.html#r-as-a-calculator",
    "href": "ae/ae-01.html#r-as-a-calculator",
    "title": "Welcome to R",
    "section": "R as a calculator",
    "text": "R as a calculator\n\nUse R as a calculator by typing the following into the console:\n\n\n5 * 5 + 10\n\nx = 3\nx + x^2\n\nx = 1:10\nx * 7\nIn the last couple examples we save some value as the object “x”.\nWe can “print” x to the screen by typing the name of the object (“x”) in the console or in a code chunk."
  },
  {
    "objectID": "ae/ae-01.html#tour-of-rstudio",
    "href": "ae/ae-01.html#tour-of-rstudio",
    "title": "Welcome to R",
    "section": "Tour of RStudio",
    "text": "Tour of RStudio\n\nenvironment\nR functions\nloading and viewing a data frame"
  },
  {
    "objectID": "ae/ae-01.html#load-a-package",
    "href": "ae/ae-01.html#load-a-package",
    "title": "Welcome to R",
    "section": "Load a package",
    "text": "Load a package\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "ae/ae-01.html#load-data",
    "href": "ae/ae-01.html#load-data",
    "title": "Welcome to R",
    "section": "Load data",
    "text": "Load data\n\nroster = read_csv(\"data/roster.csv\")\nsurvey = read_csv(\"data/survey.csv\")\n\nQuestion: What objects store the data in the code chunk above? Can you print them to the screen?\nCreate a new code chunk with CMD+OPTION+I (mac) or CTRL+ALT+I (windows/linux)\nSo far we’ve already seen two functions. library and read_csv. Functions in R are attached to parentheses and take an input, aka an argument, and often (but not always) return an output. To learn more about a function, you can check the documentation with ?, e.g. ?library."
  },
  {
    "objectID": "ae/ae-01.html#demos",
    "href": "ae/ae-01.html#demos",
    "title": "Welcome to R",
    "section": "Demos",
    "text": "Demos\nLet’s glimpse the data frame.\n\nglimpse(survey)\n\nRows: 12\nColumns: 5\n$ name                 <chr> \"A\", \"Appa\", \"Bumi\", \"Soka\", \"Katara\", \"Suki\", \"Z…\n$ email                <chr> \"the-last-Rbender@duke.edu\", \"yip-yip-appa@duke.e…\n$ bender               <chr> \"Airbender\", \"Airbender\", \"Earthbender\", \"None\", …\n$ previous_programming <chr> \"No\", \"No\", \"No\", \"Somewhat\", \"Yes\", \"Yes\", \"Yes\"…\n$ year                 <dbl> 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4\n\n\nTo look at all of it, we can use view()\n\nview(survey)\n\nView the roster data in the console\nTerminology: “columns” of a dataframe are called variables whereas “rows” are observations.\nQuestion: How many variables are in the data frame survey? How many observations? What about the data frame roster?\nWhy must I input specific email formats?\n\nroster |>\n  left_join(survey, by = \"email\")"
  },
  {
    "objectID": "ae/ae-09.html",
    "href": "ae/ae-09.html",
    "title": "Troubleshooting / Review",
    "section": "",
    "text": "this ae is not due for grade. No need to push your solutions.\nlab-3 due today at 5:00pm\nexam 1 released today at 5:00pm\ncheckout the cheat sheets on the website"
  },
  {
    "objectID": "ae/ae-09.html#getting-started",
    "href": "ae/ae-09.html#getting-started",
    "title": "Troubleshooting / Review",
    "section": "Getting started",
    "text": "Getting started\nClone your ae9-username repo from the GitHub organization."
  },
  {
    "objectID": "ae/ae-09.html#today",
    "href": "ae/ae-09.html#today",
    "title": "Troubleshooting / Review",
    "section": "Today",
    "text": "Today\nBy the end of today you will…\n\ndebug code"
  },
  {
    "objectID": "ae/ae-09.html#data",
    "href": "ae/ae-09.html#data",
    "title": "Troubleshooting / Review",
    "section": "Data",
    "text": "Data\nIn this ae we will work within mpg data set within the ggplot2 package."
  },
  {
    "objectID": "ae/ae-09.html#notes",
    "href": "ae/ae-09.html#notes",
    "title": "Troubleshooting / Review",
    "section": "Notes",
    "text": "Notes\nAlmost none of the code below runs. It’s your job to figure out why.\n\nExercise 1\nLet’s load the library that contains the data:\n\nlibrary(ggplot2)\n\nand then explicitly place the data into our environment:\n\ndata(mpg)\n\nand finally glimpse the data:\n\nglimpse(mpg)\n\nError in glimpse(mpg): could not find function \"glimpse\"\n\n\nwrite here what went wrong\nNext we’ll mutate a column called 2avg that reports the average of both city and highway miles per gallon.\n\nlibrary(dplyr)\nmpg |> \n  mutate(2avg = (cty + hwy) / 2)\n\nError: <text>:3:11: unexpected symbol\n2: mpg |> \n3:   mutate(2avg\n             ^\n\n\nwhat went wrong?\nNext, before we continue further, we want to make sure our document renders to “pdf”. Change the format to PDF in the YAML at the top of the document and render. What goes wrong?\nwhat went wrong?\nWe next decide to print the five most fuel efficient highway cars to the screen.\n\nmpg2 = mpg |>\n  arrange(desc(hwy)) |>\n  head(5)\n\nError in arrange(mpg, desc(hwy)): could not find function \"arrange\"\n\n\nwhat went wrong?\nNext, we want to plot cty vs hwy fuel efficiency. If you run into something you haven’t encountered, read the documentation with ? e.g. ?geom_abline and scroll to the bottom to find an example of the code in action.\n\nmpg = mpg |>\n  ggplot(aes(x = cty, y = hwy)) + \n  geom_point()\n\nmpg |>\n  ggplot(aes(x = cty, y = hwy)) + \n  geom_point() +\n  geom_abline(y = x)\n\nwhat went wrong?"
  },
  {
    "objectID": "ae/ae-09.html#debug",
    "href": "ae/ae-09.html#debug",
    "title": "Troubleshooting / Review",
    "section": "Debug",
    "text": "Debug\nDebug the following code chunks.\n\nExercise 2\n\nmpg |>\n  ggplot(aes(x = hwy, y = count)) + \n  geom_histogram() + \n  labs(x = \"Highway MPG\", title = \"Histogram of fuel economy\")\n\n\nmpg\n  ggplot(aes(x = as.factor(cyl), y = cty))\n  geom_boxplot() +\n  labs(x = \"Cylinders\", title = \"Box plot of city MPG by engine size\")\n\n\nwhy doe we need as.factor() above?\n\n\n\nExercise 3\n\nWhen in doubt, comment out! A trick to figuring out what went wrong with your code is to try running it line by line, commenting out the rest (CMD + SHIFT + C : mac), (CTRL + SHIFT + C : windows).\n\n\nmpg |>\n  ggplot(aes(x = year, cty))) |>\n  geom_boxplot()\n  labs(x = Year,\n       y = \"City MPG\" title = \"Fuel efficiency by year\"} +\n    \"theme_bw\"()\n\n\ndf = data.frame(x = c(1, 2, NA, 5, 55, 32, 19, 12, 43, 6, 41, 3),\n                y = rep(c(\"A\", \"B\"), 6))\n\nglimpse(df)\n\nError in glimpse(df): could not find function \"glimpse\"\n\n\n\ndf |> \n  summarize(mean(x))\n\nError in summarize(df, mean(x)): could not find function \"summarize\""
  },
  {
    "objectID": "ae/ae-09.html#yaml-errors",
    "href": "ae/ae-09.html#yaml-errors",
    "title": "Troubleshooting / Review",
    "section": "YAML errors",
    "text": "YAML errors\nThe YAML at the top of the document and the code chunk specific YAML matters.\nYAML below\n#| label:codeChunk1\nwill result in an error due to incorrect spacing around :\nERROR: Validation of YAML cell metadata failed.\nERROR: Render failed due to invalid YAML.\nAlso, you can’t have two code chunks with the same label."
  },
  {
    "objectID": "ae/ae-09.html#directories",
    "href": "ae/ae-09.html#directories",
    "title": "Troubleshooting / Review",
    "section": "Directories",
    "text": "Directories\n\nWhere is the data?\nR has a host of functions to read in various types of data. From JSON to CSV to XML, there’s a function to load it and a package to interact with it.\nMost commonly, in this course, we will encounter comma separated values (CSV) files and excel files (e.g. with extension .xslx). A couple easy ways to read these in:\n\nTo read .csv files, readr::read_csv()\nTo read .xlsx files, readxl::read_xlsx()\n\nThe notation x::y() means that the function y() is found within the package x and can be loaded with library(x). readr is one of the core sub-packages of the tidyverse.\nMost often, you will open a project and the path to the data will be relative to the project folder.\n\n\nWhy can’t I push my .qmd file to GitHub?\n\nAre you in the appropriate directory? AKA does the project you have open (upper right) match the quarto file you are working in?\nDid you save the changes in your file? If you haven’t changed the file, you can’t commit changes."
  },
  {
    "objectID": "slides/lab0-welcome.html#introductions",
    "href": "slides/lab0-welcome.html#introductions",
    "title": "Welcome to Lab",
    "section": "Introductions",
    "text": "Introductions\n\n\n\n\nMeet the TA!\nIntroduce yourself (icebreaker)\nFollow along these slides on the course website (under slides): sta199-sp23-1.github.io\nBookmark this! It’s the course website."
  },
  {
    "objectID": "slides/lab0-welcome.html#what-to-expect-in-labs",
    "href": "slides/lab0-welcome.html#what-to-expect-in-labs",
    "title": "Welcome to Lab",
    "section": "What to expect in labs",
    "text": "What to expect in labs\n\nIntroduce lab assignment (5-10 minutes, longer today)\nWork on the lab assignment (you can find it on the course website). You will work with others but your submission must be your own for the first several labs.\nTypically you won’t finish labs in-class and they will be due 1 week after they are released."
  },
  {
    "objectID": "slides/lab0-welcome.html#tips",
    "href": "slides/lab0-welcome.html#tips",
    "title": "Welcome to Lab",
    "section": "Tips",
    "text": "Tips\n\nRead all instructions on the lab.\nOne work strategy is to get through portions that you think will be most challenging (which initially might be the coding component) during lab when we can help you on the spot and leave the narrative writing until later.\nMake use of office hours. Before you need help!"
  },
  {
    "objectID": "slides/lab0-welcome.html#beginnings",
    "href": "slides/lab0-welcome.html#beginnings",
    "title": "Welcome to Lab",
    "section": "Beginnings",
    "text": "Beginnings\n\nCreate a GitHub account (unless you already have one) on https://github.com/\n\none day you might want to show off your work, so choose a username you will be proud to show to a future employer.\n\ntell us your username by taking this survey. This is essential to receive credit on future assignments.\n\n\n\n\n05:00"
  },
  {
    "objectID": "slides/lab0-welcome.html#create-your-github-repo",
    "href": "slides/lab0-welcome.html#create-your-github-repo",
    "title": "Welcome to Lab",
    "section": "Create your GitHub repo",
    "text": "Create your GitHub repo\nCreate your own copy of today’s lab by clicking here. You may be prompted to login to GitHub. Your copy of of the lab is called your “repository”, or “repo” for short."
  },
  {
    "objectID": "slides/lab0-welcome.html#demo-setting-up",
    "href": "slides/lab0-welcome.html#demo-setting-up",
    "title": "Welcome to Lab",
    "section": "Demo: setting up",
    "text": "Demo: setting up\nNow that your lab repo is created, let’s setup git to work within RStudio.\nTo begin, open\n\nthe lab instructions here and\nthe RStudio containers here\nyour repo (that contains your starting files for the lab) here\n\nFollow the instructions in the lab as I demo."
  },
  {
    "objectID": "slides/lab0-welcome.html#remember",
    "href": "slides/lab0-welcome.html#remember",
    "title": "Welcome to Lab",
    "section": "Remember",
    "text": "Remember\nNo programming experience is required or expected to take this class. Come to lecture, lab and office hours. It’s okay to be confused. Stick with it, you will get the hang of it!\n\n\n🔗 sta199-sp23-1.github.io"
  },
  {
    "objectID": "slides/01-welcome-199.html#meet-the-professor",
    "href": "slides/01-welcome-199.html#meet-the-professor",
    "title": "Welcome to STA 199",
    "section": "Meet the professor",
    "text": "Meet the professor\n\n\n\n\n\n\nAlexander Fisher\nalexander.fisher@duke.edu\nOffice hours: Wednesday 1:30-3:30pm in Old Chem 207\nA little bit about my research…"
  },
  {
    "objectID": "slides/01-welcome-199.html#why-data-science",
    "href": "slides/01-welcome-199.html#why-data-science",
    "title": "Welcome to STA 199",
    "section": "Why data science?",
    "text": "Why data science?\nData science turns data into knowledge.\n\nExamples"
  },
  {
    "objectID": "slides/01-welcome-199.html#course-overview",
    "href": "slides/01-welcome-199.html#course-overview",
    "title": "Welcome to STA 199",
    "section": "Course overview",
    "text": "Course overview\n\n\n\n\n\n\n\n\nImportant\n\n\nNo programming experience required."
  },
  {
    "objectID": "slides/01-welcome-199.html#learning-objectives",
    "href": "slides/01-welcome-199.html#learning-objectives",
    "title": "Welcome to STA 199",
    "section": "Learning objectives",
    "text": "Learning objectives\nBy the end of this course you will be able to…\n\nlearn to explore, visualize, and analyze data in a reproducible manner\ngain experience in data wrangling and munging, exploratory data analysis, predictive modeling, and data visualization\nwork on problems and case studies inspired by and based on real-world questions and data\nlearn to effectively communicate results through written assignments and project presentation\ndevelop your own question about a data set of your choosing and use techniques from this class to answer the question"
  },
  {
    "objectID": "slides/01-welcome-199.html#assessments",
    "href": "slides/01-welcome-199.html#assessments",
    "title": "Welcome to STA 199",
    "section": "Assessments",
    "text": "Assessments\n\nPrepare: short videos, reading assignments, and lectures.\nPractice: application exercises\nPerform: labs, homework, exams, and the project.\n\n\n\n\nCategory\nPercentage\n\n\n\n\nHomework\n30%\n\n\nLabs\n15%\n\n\nProject\n15%\n\n\nExam 01\n18%\n\n\nExam 02\n18%\n\n\nApplication Exercises\n4%"
  },
  {
    "objectID": "slides/01-welcome-199.html#community",
    "href": "slides/01-welcome-199.html#community",
    "title": "Welcome to STA 199",
    "section": "Community",
    "text": "Community\nUphold the Duke Community Standard:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors; and\nI will act if the Standard is compromised.\n\nAny violations in academic honesty standards as outlined in the Duke Community Standard and those specific to this course will automatically result in a 0 for the assignment and will be reported to the Office of Student Conduct for further action.\nLearning environment\n\nCreate a learning environment that is welcoming, inclusive, and accessible to everyone.\nRespect and honor each other.\n\nTeam work policy\nThe final project and several labs will be completed in teams. All group members are expected to participate equally. Commit history may be used to give individual team members different grades. Your grade may differ from the rest of your group."
  },
  {
    "objectID": "slides/01-welcome-199.html#late-policy",
    "href": "slides/01-welcome-199.html#late-policy",
    "title": "Welcome to STA 199",
    "section": "Late policy",
    "text": "Late policy\n\nHomeworks and labs can be turned in within 72 hours of the deadline for grade penalty (5% off per day).\nExams and the final project cannot be turned in late and can only be excused under exceptional circumstances.\nThe Duke policy for illness requires a short-term illness report or a letter from the Dean; except in emergencies, all other absenteeism must be approved in advance (e.g., an athlete who must miss class may be excused by prior arrangement for specific days). For emergencies, email notification is needed at the first reasonable time.\nAll exemptions will be handled by course coordinator, Ed Tam, at sta199@duke.edu\nLast minute coding/rendering issues will not be granted extensions."
  },
  {
    "objectID": "slides/01-welcome-199.html#course-toolkit",
    "href": "slides/01-welcome-199.html#course-toolkit",
    "title": "Welcome to STA 199",
    "section": "Course toolkit",
    "text": "Course toolkit\n\ncourse website: https://sta199-sp23-1.github.io/\ncourse organization (on GitHub): https://github.com/sta199-sp23-1\nslack: https://sta199-sp23-001.slack.com"
  },
  {
    "objectID": "slides/01-welcome-199.html#communication-and-missing-class",
    "href": "slides/01-welcome-199.html#communication-and-missing-class",
    "title": "Welcome to STA 199",
    "section": "Communication and missing class",
    "text": "Communication and missing class\nIf you have questions about homework/lab exercises, debugging, or any question about course materials\n\ncome to office hours\npost to a public channel in slack.\n\nWhen you need help debugging, it is essential you provide a reproducible example of the code that caused the error. Screenshots, or pasting a short snippet of the offending code is helpful!\n\n\n\n\n\n\n\nWarning\n\n\nThe teaching team will not debug via email.\n\n\n\n\n\nWhen you miss a class:\n\nwatch the recorded lecture on Sakai\ncome to office hours or post in a public channel of slack if you have questions"
  },
  {
    "objectID": "slides/01-welcome-199.html#jump-in",
    "href": "slides/01-welcome-199.html#jump-in",
    "title": "Welcome to STA 199",
    "section": "Jump in",
    "text": "Jump in\n\nCheck your email / sakai announcements for slack invite.\nPost on slack\nAccept your course organization invite\n\n\n\nDon’t have an invite? Follow the lab 0 instructions to create a lab-0-username repo here.\n\n\n\nDemo: ae1\n\n\n\n🔗 sta199-sp23-1.github.io"
  },
  {
    "objectID": "ae/ae-04.html",
    "href": "ae/ae-04.html",
    "title": "Grammar of data wrangling",
    "section": "",
    "text": "this ae is due for grade (48 hours from class). To turn in, simply push to GitHub\nhomework 01"
  },
  {
    "objectID": "ae/ae-04.html#getting-started",
    "href": "ae/ae-04.html#getting-started",
    "title": "Grammar of data wrangling",
    "section": "Getting started",
    "text": "Getting started\nClone your ae4-username repo from the GitHub organization."
  },
  {
    "objectID": "ae/ae-04.html#today",
    "href": "ae/ae-04.html#today",
    "title": "Grammar of data wrangling",
    "section": "Today",
    "text": "Today\nBy the end of today you will…\n\nunderstand how data is organized according to a consistent set of “tidy” principles\nuse seven key verbs to wrangle data and extract meaning"
  },
  {
    "objectID": "ae/ae-04.html#load-packages",
    "href": "ae/ae-04.html#load-packages",
    "title": "Grammar of data wrangling",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(tidyverse)\nlibrary(nycflights13)\n\nThe data frame has over 336,000 observations (rows), 336776 observations to be exact, so we will not view the entire data frame. Instead we’ll use the commands below to help us explore the data.\n\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n\nnames(flights)\n\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n\n\n\nhead(flights)\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n6  2013     1     1      554         558      -4     740     728      12 UA     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nThe head() function returns “A tibble: 6 x 19” and then the first six rows of the flights data."
  },
  {
    "objectID": "ae/ae-04.html#the-pipe",
    "href": "ae/ae-04.html#the-pipe",
    "title": "Grammar of data wrangling",
    "section": "The pipe",
    "text": "The pipe\nWe saw the pipe in a previous lecture. Here it is again, with a demo of why it’s useful.\nRemember, a pipe |> or %>% takes what comes before it and makes it the input to the following function.\nWhen reading code in English, say “and then” whenever you see a pipe.\n\nExercise 1\nRe-write the code below with pipes.\n\nhead(select(flights, dep_delay, arr_delay))\n\n# A tibble: 6 × 2\n  dep_delay arr_delay\n      <dbl>     <dbl>\n1         2        11\n2         4        20\n3         2        33\n4        -1       -18\n5        -6       -25\n6        -4        12"
  },
  {
    "objectID": "ae/ae-04.html#select",
    "href": "ae/ae-04.html#select",
    "title": "Grammar of data wrangling",
    "section": "select()",
    "text": "select()\n\nDemo: Make a data frame that only contains the variables dep_delay and arr_delay.\n\n\nflights |>\n  select(dep_delay, arr_delay)\n\n# A tibble: 336,776 × 2\n   dep_delay arr_delay\n       <dbl>     <dbl>\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# … with 336,766 more rows\n\n\n\nDemo: Make a data frame that keeps every variable except dep_delay.\n\n\nflights |>\n  select(-dep_delay)\n\n# A tibble: 336,776 × 18\n    year month   day dep_time sched_dep…¹ arr_t…² sched…³ arr_d…⁴ carrier flight\n   <int> <int> <int>    <int>       <int>   <int>   <int>   <dbl> <chr>    <int>\n 1  2013     1     1      517         515     830     819      11 UA        1545\n 2  2013     1     1      533         529     850     830      20 UA        1714\n 3  2013     1     1      542         540     923     850      33 AA        1141\n 4  2013     1     1      544         545    1004    1022     -18 B6         725\n 5  2013     1     1      554         600     812     837     -25 DL         461\n 6  2013     1     1      554         558     740     728      12 UA        1696\n 7  2013     1     1      555         600     913     854      19 B6         507\n 8  2013     1     1      557         600     709     723     -14 EV        5708\n 9  2013     1     1      557         600     838     846      -8 B6          79\n10  2013     1     1      558         600     753     745       8 AA         301\n# … with 336,766 more rows, 8 more variables: tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​arr_time, ³​sched_arr_time, ⁴​arr_delay\n\n\n\nDemo: Make a data frame that includes all variables between year through dep_delay (inclusive). These are all variables that provide information about the departure of each flight.\n\n\nflights |>\n  select(year:dep_delay)\n\n# A tibble: 336,776 × 6\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# … with 336,766 more rows\n\n\n\nDemo: Use the select helper contains() to make a data frame that includes the variables associated with the arrival, i.e., contains the string \"arr\\_\" in the name.\n\n\nflights |>\n  select(contains(\"arr_\"))\n\n# A tibble: 336,776 × 3\n   arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>\n 1      830            819        11\n 2      850            830        20\n 3      923            850        33\n 4     1004           1022       -18\n 5      812            837       -25\n 6      740            728        12\n 7      913            854        19\n 8      709            723       -14\n 9      838            846        -8\n10      753            745         8\n# … with 336,766 more rows"
  },
  {
    "objectID": "ae/ae-04.html#slice",
    "href": "ae/ae-04.html#slice",
    "title": "Grammar of data wrangling",
    "section": "slice()",
    "text": "slice()\n\nDemo: Display the first five rows of the flights data frame.\n\n\nflights |>\n  slice(1:5)\n\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\nDemo: Display the last two rows of the flights data frame.\n\n\nflights |>\n  slice((n()-1):n())\n\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     9    30       NA        1159      NA      NA    1344      NA MQ     \n2  2013     9    30       NA         840      NA      NA    1020      NA MQ     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay"
  },
  {
    "objectID": "ae/ae-04.html#arrange",
    "href": "ae/ae-04.html#arrange",
    "title": "Grammar of data wrangling",
    "section": "arrange()",
    "text": "arrange()\n\nDemo: Let’s arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.\n\nQuestion: What does it mean for the dep_delay to have a negative value?\n\nflights |>\n  arrange(dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    12     7     2040       2123     -43      40    2352      48 B6     \n 2  2013     2     3     2022       2055     -33    2240    2338     -58 DL     \n 3  2013    11    10     1408       1440     -32    1549    1559     -10 EV     \n 4  2013     1    11     1900       1930     -30    2233    2243     -10 DL     \n 5  2013     1    29     1703       1730     -27    1947    1957     -10 F9     \n 6  2013     8     9      729        755     -26    1002     955       7 MQ     \n 7  2013    10    23     1907       1932     -25    2143    2143       0 EV     \n 8  2013     3    30     2030       2055     -25    2213    2250     -37 MQ     \n 9  2013     3     2     1431       1455     -24    1601    1631     -30 9E     \n10  2013     5     5      934        958     -24    1225    1309     -44 B6     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\nDemo: Now let’s arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.\n\n\nflights |>\n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     9      641        900    1301    1242    1530    1272 HA     \n 2  2013     6    15     1432       1935    1137    1607    2120    1127 MQ     \n 3  2013     1    10     1121       1635    1126    1239    1810    1109 MQ     \n 4  2013     9    20     1139       1845    1014    1457    2210    1007 AA     \n 5  2013     7    22      845       1600    1005    1044    1815     989 MQ     \n 6  2013     4    10     1100       1900     960    1342    2211     931 DL     \n 7  2013     3    17     2321        810     911     135    1020     915 DL     \n 8  2013     6    27      959       1900     899    1236    2226     850 DL     \n 9  2013     7    22     2257        759     898     121    1026     895 DL     \n10  2013    12     5      756       1700     896    1058    2020     878 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\nExercise 2\nCreate a data frame that only includes the plane tail number (tailnum), carrier (carrier), and departure delay for the flight with the longest departure delay. What is the plane tail number (tailnum) for this flight?\n\n# code here"
  },
  {
    "objectID": "ae/ae-04.html#filter",
    "href": "ae/ae-04.html#filter",
    "title": "Grammar of data wrangling",
    "section": "filter()",
    "text": "filter()\n\nDemo: Filter the data frame by selecting the rows where the destination airport is RDU.\n\n\nflights |>\n  filter(dest == \"RDU\")\n\n# A tibble: 8,163 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      800        810     -10     949     955      -6 MQ     \n 2  2013     1     1      832        840      -8    1006    1030     -24 MQ     \n 3  2013     1     1      851        851       0    1032    1036      -4 EV     \n 4  2013     1     1      917        920      -3    1052    1108     -16 B6     \n 5  2013     1     1     1024       1030      -6    1204    1215     -11 MQ     \n 6  2013     1     1     1127       1129      -2    1303    1309      -6 EV     \n 7  2013     1     1     1157       1205      -8    1342    1345      -3 MQ     \n 8  2013     1     1     1240       1235       5    1415    1415       0 MQ     \n 9  2013     1     1     1317       1325      -8    1454    1505     -11 MQ     \n10  2013     1     1     1449       1450      -1    1651    1640      11 MQ     \n# … with 8,153 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\nDemo: We can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0.\n\n\nflights |>\n  filter(dest == \"RDU\", arr_delay < 0)\n\n# A tibble: 4,232 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      800        810     -10     949     955      -6 MQ     \n 2  2013     1     1      832        840      -8    1006    1030     -24 MQ     \n 3  2013     1     1      851        851       0    1032    1036      -4 EV     \n 4  2013     1     1      917        920      -3    1052    1108     -16 B6     \n 5  2013     1     1     1024       1030      -6    1204    1215     -11 MQ     \n 6  2013     1     1     1127       1129      -2    1303    1309      -6 EV     \n 7  2013     1     1     1157       1205      -8    1342    1345      -3 MQ     \n 8  2013     1     1     1317       1325      -8    1454    1505     -11 MQ     \n 9  2013     1     1     1505       1510      -5    1654    1655      -1 MQ     \n10  2013     1     1     1800       1800       0    1945    1951      -6 B6     \n# … with 4,222 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nWe can do more complex tasks using logical operators:\n\n\n\noperator\ndefinition\n\n\n\n\n<\nis less than?\n\n\n<=\nis less than or equal to?\n\n\n>\nis greater than?\n\n\n>=\nis greater than or equal to?\n\n\n==\nis exactly equal to?\n\n\n!=\nis not equal to?\n\n\nx & y\nis x AND y?\n\n\nx \\| y\nis x OR y?\n\n\nis.na(x)\nis x NA?\n\n\n!is.na(x)\nis x not NA?\n\n\nx %in% y\nis x in y?\n\n\n!(x %in% y)\nis x not in y?\n\n\n!x\nis not x?\n\n\n\nThe final operator only makes sense if x is logical (TRUE / FALSE).\n\nExercise 3\nDescribe what the code is doing in words.\n\nflights |>\n  filter(\n    dest %in% c(\"RDU\", \"GSO\"),\n    arr_delay < 0 | dep_delay < 0\n    )\n\n# A tibble: 6,203 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      800        810     -10     949     955      -6 MQ     \n 2  2013     1     1      832        840      -8    1006    1030     -24 MQ     \n 3  2013     1     1      851        851       0    1032    1036      -4 EV     \n 4  2013     1     1      917        920      -3    1052    1108     -16 B6     \n 5  2013     1     1     1024       1030      -6    1204    1215     -11 MQ     \n 6  2013     1     1     1127       1129      -2    1303    1309      -6 EV     \n 7  2013     1     1     1157       1205      -8    1342    1345      -3 MQ     \n 8  2013     1     1     1317       1325      -8    1454    1505     -11 MQ     \n 9  2013     1     1     1449       1450      -1    1651    1640      11 MQ     \n10  2013     1     1     1505       1510      -5    1654    1655      -1 MQ     \n# … with 6,193 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay"
  },
  {
    "objectID": "ae/ae-04.html#count",
    "href": "ae/ae-04.html#count",
    "title": "Grammar of data wrangling",
    "section": "count()",
    "text": "count()\n\nDemo: Create a frequency table of the destination locations for flights from New York.\n\n\nflights |>\n  count(dest)\n\n# A tibble: 105 × 2\n   dest      n\n   <chr> <int>\n 1 ABQ     254\n 2 ACK     265\n 3 ALB     439\n 4 ANC       8\n 5 ATL   17215\n 6 AUS    2439\n 7 AVL     275\n 8 BDL     443\n 9 BGR     375\n10 BHM     297\n# … with 95 more rows\n\n\n\nDemo: In which month was there the fewest number of flights? How many flights were there in that month?\n\n\nflights |>\n  count(month) |>\n  filter(n == min(n))\n\n# A tibble: 1 × 2\n  month     n\n  <int> <int>\n1     2 24951\n\n\n\nExercise 4\nOn which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\n# code here"
  },
  {
    "objectID": "ae/ae-04.html#mutate",
    "href": "ae/ae-04.html#mutate",
    "title": "Grammar of data wrangling",
    "section": "mutate()",
    "text": "mutate()\nUse mutate() to create a new variable.\n\nDemo: In the code chunk below, air_time (minutes in the air) is converted to hours, and then new variable mph is created, corresponding to the miles per hour of the flight.\n\n\nflights |>\n  mutate(\n    hours = air_time / 60,\n    mph = distance / hours\n    ) |>\n  select(air_time, distance, hours, mph)\n\n# A tibble: 336,776 × 4\n   air_time distance hours   mph\n      <dbl>    <dbl> <dbl> <dbl>\n 1      227     1400 3.78   370.\n 2      227     1416 3.78   374.\n 3      160     1089 2.67   408.\n 4      183     1576 3.05   517.\n 5      116      762 1.93   394.\n 6      150      719 2.5    288.\n 7      158     1065 2.63   404.\n 8       53      229 0.883  259.\n 9      140      944 2.33   405.\n10      138      733 2.3    319.\n# … with 336,766 more rows\n\n\n\nYour turn (4 minutes): Create a new variable to calculate the percentage of flights in each month. What percentage of flights take place in July?\n\n\nflights |>\n  count(month) |>\n  mutate(perc = n / sum(n) * 100)\n\n# A tibble: 12 × 3\n   month     n  perc\n   <int> <int> <dbl>\n 1     1 27004  8.02\n 2     2 24951  7.41\n 3     3 28834  8.56\n 4     4 28330  8.41\n 5     5 28796  8.55\n 6     6 28243  8.39\n 7     7 29425  8.74\n 8     8 29327  8.71\n 9     9 27574  8.19\n10    10 28889  8.58\n11    11 27268  8.10\n12    12 28135  8.35"
  },
  {
    "objectID": "ae/ae-04.html#summarize",
    "href": "ae/ae-04.html#summarize",
    "title": "Grammar of data wrangling",
    "section": "summarize()",
    "text": "summarize()\nsummarize() collapses the rows into summary statistics and removes columns irrelevant to the calculation.\nBe sure to name your columns!\n\nflights |>\n  summarize(mean_dep_delay = mean(dep_delay))\n\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1             NA\n\n\nWhy did this code return NA?\nLet’s fix it!\n\nflights |>\n  summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1           12.6"
  },
  {
    "objectID": "ae/ae-04.html#group_by",
    "href": "ae/ae-04.html#group_by",
    "title": "Grammar of data wrangling",
    "section": "group_by()",
    "text": "group_by()\ngroup_by() is used for grouped operations. It’s very powerful when paired with summarise() to calculate summary statistics by group.\nHere we find the mean and standard deviation of departure delay for each month.\n\nflights |>\n  group_by(month) |>\n  summarize(\n    mean_dep_delay = mean(dep_delay, na.rm = TRUE), \n    sd_dep_delay = sd(dep_delay, na.rm = TRUE)\n    )\n\n# A tibble: 12 × 3\n   month mean_dep_delay sd_dep_delay\n   <int>          <dbl>        <dbl>\n 1     1          10.0          36.4\n 2     2          10.8          36.3\n 3     3          13.2          40.1\n 4     4          13.9          43.0\n 5     5          13.0          39.4\n 6     6          20.8          51.5\n 7     7          21.7          51.6\n 8     8          12.6          37.7\n 9     9           6.72         35.6\n10    10           6.24         29.7\n11    11           5.44         27.6\n12    12          16.6          41.9\n\n\n\nExercise 5\nWhat is the median departure delay for each airports around NYC (origin)?\n\nflights |>\n  group_by(origin) |>\n  summarize(\n    med_dep_delay = median(dep_delay, na.rm = TRUE)\n    )\n\n# A tibble: 3 × 2\n  origin med_dep_delay\n  <chr>          <dbl>\n1 EWR               -1\n2 JFK               -1\n3 LGA               -3"
  },
  {
    "objectID": "ae/ae-03.html",
    "href": "ae/ae-03.html",
    "title": "Visualizing various types of data",
    "section": "",
    "text": "Join GitHub organization if you haven’t already\nThis ae is not due for a grade, but when drop/add ends, aes will be graded for completion. You turn in your aes by committing to GitHub."
  },
  {
    "objectID": "ae/ae-03.html#getting-started",
    "href": "ae/ae-03.html#getting-started",
    "title": "Visualizing various types of data",
    "section": "Getting started",
    "text": "Getting started\nClone your ae3-username repo from the GitHub organization. If you don’t have an ae3-username repo, you have not yet accepted your course org invite. You can still clone the public repo but note that you won’t be able to push."
  },
  {
    "objectID": "ae/ae-03.html#today",
    "href": "ae/ae-03.html#today",
    "title": "Visualizing various types of data",
    "section": "Today",
    "text": "Today\nBy the end of today you will…\n\ncreate and interpret scatter plots, bar plots, stacked bar plots, facet plots and be able to look up and use other ggplot geometries\n\nBut first, we’ll finish ae2"
  },
  {
    "objectID": "ae/ae-03.html#load-packages",
    "href": "ae/ae-03.html#load-packages",
    "title": "Visualizing various types of data",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(viridis) # we'll use to customize colors"
  },
  {
    "objectID": "ae/ae-03.html#plots",
    "href": "ae/ae-03.html#plots",
    "title": "Visualizing various types of data",
    "section": "Plots",
    "text": "Plots\nThe procedure used to construct plots can be summarized using the code below.\n\nggplot(data = [data set], \n       mapping = aes(x = [x-variable], y = [y-variable])) +\n   geom_xxx() +\n   geom_xxx() + \n  other options\n\n\nExample: bar plot\n\nggplot(data = penguins, \n       mapping = aes(x = species)) +\n  geom_bar() +\n  labs(x = \"Species\", y = \"Count\", title = \"Palmer penguin species\")\n\n\n\n\n\n\nExample: stacked bar plot\n\npenguins |>\n  filter(!is.na(sex)) |>\nggplot(mapping = aes(x = species, fill = sex)) +\n  geom_bar(position = \"fill\") +\n  labs(x = \"Species\", y = \"Count\", title = \"Palmer penguin species\")\n\n\n\n\n\nExercise 1\n\ntry with and without position = \"fill\". What does this argument do?\n\n\n\n\nAesthetics\nAn aesthetic is a visual property in your plot that is derived from the data.\n\nshape\ncolor\nsize\nalpha (transparency)\n\nWe can map a variable in our data set to a color, a size, a transparency, and so on. The aesthetics that can be used with each geom_ can be found in the documentation.\nHere we are going to use the viridis package, which has more color-blind accessible colors. scale_color_viridis specifies which colors you want to use. You can learn more about the options here.\nOther sources that can be helpful in devising accessible color schemes include Color Brewer, the Wes Anderson package, and the cividis package.\nThis visualization shows a scatterplot of bill length (x variable) and flipper length (y variable). Using the viridis function, we make points for male penguins purple and female penguins yellow. We also add axes labels and a title.\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = flipper_length_mm,\n                     color = sex)) + \n   geom_point() + \n   labs(title = \"Flipper length vs bill length\",\n        x = \"Bill length (mm)\", y = \"Flipper length (mm)\") + \n        scale_color_viridis(discrete=TRUE, option = \"D\", name=\"Sex\")\n\nWarning: Removed 11 rows containing missing values (geom_point).\n\n\n\n\n\nIf you want to change, for exaple, color or fill for all points regardless of the data, you can pass the argument color = or fill = to the geometry itself. **Properties of the plot that are based on the data must be passed to the aes() function.\n\nExercise 2\n\nCreate a new code chunk and paste the code above into it. Remove the scale_color_viridis layer. Next change the above color to \"steelblue\". Since you are hard-coding the color of all the points, this must happen inside the geometry not the aesthetic. On the other hand, color = sex only works inside aes().\n\n\n\nExercise 3\n\nWhat will the visualization look like below? Write your answer down before running the code.\n\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = flipper_length_mm,\n                     shape = sex)) + \n   geom_point() + \n   labs(title = \"Flipper length vs bill length\",\n        x = \"Bill length (mm)\", y = \"Flipper length (mm)\") + \n        scale_color_viridis(discrete = TRUE, option = \"D\", name=\"Sex\")\n\n\n\n\nA note on colors\nTo work with the viridis color palettes…\n\nscale_color_viridis() to change color\nscale_fill_viridis() to change fill\nargument discrete = TRUE to use a discrete color palette\nargument discrete = FALSE to use a continuous color palette\n\nTo use your own custom color palettes, you can use scale_color_manual() and scale_fill_manual(), but more on this later.\n\n\nFaceting\nWe can use smaller plots to display different subsets of the data using faceting. This is helpful to visualize \\(>2\\) variables and examine conditional relationships.\n\npenguins |>\n  ggplot(aes(x = bill_length_mm, flipper_length_mm, color = island)) +\n  geom_point() +\n  facet_wrap(~ species) +\n  labs(x = \"Bill length (mm)\", y = \"Flipper length (mm)\", color = \"Island\")\n\nWarning: Removed 2 rows containing missing values (geom_point).\n\n\n\n\n\n\npenguins |>\n  ggplot(aes(x = bill_length_mm, flipper_length_mm, color = species)) +\n  geom_point() +\n  facet_wrap(~ island) +\n  labs(x = \"Bill length (mm)\", y = \"Flipper length (mm)\", color = \"Species\") +\n  scale_color_viridis(discrete = TRUE)\n\nWarning: Removed 2 rows containing missing values (geom_point)."
  },
  {
    "objectID": "ae/ae-03.html#ggplot-activity",
    "href": "ae/ae-03.html#ggplot-activity",
    "title": "Visualizing various types of data",
    "section": "ggplot activity",
    "text": "ggplot activity\n\n# code here"
  },
  {
    "objectID": "ae/ae-03.html#additional-resources",
    "href": "ae/ae-03.html#additional-resources",
    "title": "Visualizing various types of data",
    "section": "Additional resources",
    "text": "Additional resources\n\nFind more ggplot geometries at https://ggplot2.tidyverse.org/reference/"
  },
  {
    "objectID": "ae/ae-05.html",
    "href": "ae/ae-05.html",
    "title": "Working with multiple data frames",
    "section": "",
    "text": "this ae is due for grade (48 hours from class). To turn in, simply push to GitHub\nhomework 01\nlab 01 due Monday at 5:00pm"
  },
  {
    "objectID": "ae/ae-05.html#getting-started",
    "href": "ae/ae-05.html#getting-started",
    "title": "Working with multiple data frames",
    "section": "Getting started",
    "text": "Getting started\nClone your ae5-username repo from the GitHub organization."
  },
  {
    "objectID": "ae/ae-05.html#today",
    "href": "ae/ae-05.html#today",
    "title": "Working with multiple data frames",
    "section": "Today",
    "text": "Today\nBy the end of today you will…\n\njoin data frames"
  },
  {
    "objectID": "ae/ae-05.html#load-packages",
    "href": "ae/ae-05.html#load-packages",
    "title": "Working with multiple data frames",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "ae/ae-05.html#joins",
    "href": "ae/ae-05.html#joins",
    "title": "Working with multiple data frames",
    "section": "Joins",
    "text": "Joins\nThere are six join functions in the dplyr package. Join functions take two data frames as arguments and return a data frame.\nThe six joins can be broken down into two categories:\n\nMutating joins: joining data frames results in mutating new columns\nFiltering joins: joining data frames results in filtering observations in one data frame based on another.\n\nIn all of the following examples, x and y are two data frames:\n\nx = tibble(value = c(100, 200, 300),\n            xcol = c(\"x1\", \"x2\", \"x3\"))\ny = tibble(value = c(100, 200, 400),\n            ycol = c(\"y1\", \"y2\", \"y4\"))\nx\n\n# A tibble: 3 × 2\n  value xcol \n  <dbl> <chr>\n1   100 x1   \n2   200 x2   \n3   300 x3   \n\ny\n\n# A tibble: 3 × 2\n  value ycol \n  <dbl> <chr>\n1   100 y1   \n2   200 y2   \n3   400 y4   \n\n\n\nMutating joins\nThe most popular 2 joins:\n\nleft_join(x, y): keep all rows from x and adds columns from y\nright_join(x, y): keeps all rows from y and adds columns from x\n\nTwo more helpful joins:\n\ninner_join(x, y): join all rows from x where there are matching values in y.Returns all combinations in case of multiple matches\nfull_join(x, y): include all rows in x or y\n\nToy examples:\n\nx %>%\n  left_join(y)\n\nJoining, by = \"value\"\n\n\n# A tibble: 3 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1   100 x1    y1   \n2   200 x2    y2   \n3   300 x3    <NA> \n\n\n\nWhat do you think Joining, by = \"value\" means?\n\n\nx %>%\n  right_join(y, by = \"value\")\n\n# A tibble: 3 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1   100 x1    y1   \n2   200 x2    y2   \n3   400 <NA>  y4   \n\n\n\nx %>%\n  inner_join(y)\n\nJoining, by = \"value\"\n\n\n# A tibble: 2 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1   100 x1    y1   \n2   200 x2    y2   \n\n\n\nfull_join(x, y)\n\nJoining, by = \"value\"\n\n\n# A tibble: 4 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1   100 x1    y1   \n2   200 x2    y2   \n3   300 x3    <NA> \n4   400 <NA>  y4   \n\n\n\n\nFiltering joins\n\nsemi_join(x, y): return all rows from x with match in y\nanti_join(x, y): return all rows from x without a match in y\n\nIn both of these “filtering” cases we do not add any new columns to our first argument (the data frame x).\nToy examples:\n\nx %>%\nsemi_join(y)\n\nJoining, by = \"value\"\n\n\n# A tibble: 2 × 2\n  value xcol \n  <dbl> <chr>\n1   100 x1   \n2   200 x2   \n\n\n\nx %>%\nanti_join(y)\n\nJoining, by = \"value\"\n\n\n# A tibble: 1 × 2\n  value xcol \n  <dbl> <chr>\n1   300 x3   \n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can manually specify which columns to join by and the columns do not have to have the same name! See the example below.\n\n\nCheck out the new data frame x2:\n\nx2 = x %>%\n  mutate(new_value = value) %>%\n  select(new_value, xcol)\n\nx2\n\n# A tibble: 3 × 2\n  new_value xcol \n      <dbl> <chr>\n1       100 x1   \n2       200 x2   \n3       300 x3   \n\n\nWe can still join x2 with y but left_join(x2, y) won’t work. We have to manually specify which columns to join by:\n\nx2 %>%\n  left_join(y, by = c(\"new_value\" = \"value\"))\n\n# A tibble: 3 × 3\n  new_value xcol  ycol \n      <dbl> <chr> <chr>\n1       100 x1    y1   \n2       200 x2    y2   \n3       300 x3    <NA>"
  },
  {
    "objectID": "ae/ae-05.html#practice",
    "href": "ae/ae-05.html#practice",
    "title": "Working with multiple data frames",
    "section": "Practice",
    "text": "Practice\nWe’ll take a look at some New York flights data.\nThis data set contains on-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013.\nThis data is a subset of the data set provided by the nycflights13 package.\n\nCodebook\nCheck out codebook for flights, airlines and airports with ?flights, ?airlines and ?airports\n\nlibrary(nycflights13)\n\ndata(flights)\ndata(airlines)\ndata(airports)\n\n\nExercise 1\nflights contains the two letter carrier abbreviations and airlines contains a dictionary. It would be nice if this information was in one data frame so we could read off easily e.g. which airlines are most likely to have arrival delays.\nUse an appropriate join to add the column of airlines to flights and save the resulting data frame as flights2.\n\n# code here\n\n\n\nExercise 2\nUsing flights2, report the average arrival delay for each carrier. Print only the 5 carrier airline with the worst arrival delays on average. No joins required here.\n\n# code here\n\n\n\nExercise 3\nCreate a new data set called dest_delays that reports the median arrival delay at each destination airport.\n\n# code here\n\n\n\nExercise 4\nWhich destination has the worst arrival delay? (Note: you will need to join dest_delays with airports to answer this question)\n\n# code here\n\n\n\nOptional bonus\n\nIs there anything else you might want to learn from the data before declaring one airport is most likely to have delayed arrival or one carrier is most likely to result in a delayed flight?"
  },
  {
    "objectID": "ae/ae-06.html",
    "href": "ae/ae-06.html",
    "title": "Tidy data",
    "section": "",
    "text": "this ae is due for grade (48 hours from class). To turn in, simply push to GitHub\nhomework 01 due Friday at 5:00pm\ncheck out exam 01 date on schedule\nadditional practice questions for exam up here\nreminder: put course title STA199 in the subject of all emails"
  },
  {
    "objectID": "ae/ae-06.html#getting-started",
    "href": "ae/ae-06.html#getting-started",
    "title": "Tidy data",
    "section": "Getting started",
    "text": "Getting started\nClone your ae6-username repo from the GitHub organization."
  },
  {
    "objectID": "ae/ae-06.html#today",
    "href": "ae/ae-06.html#today",
    "title": "Tidy data",
    "section": "Today",
    "text": "Today\nBy the end of today you will…\n\nlearn principles of tidy data\npractice using pivot_wider() and pivot_longer()"
  },
  {
    "objectID": "ae/ae-06.html#load-packages",
    "href": "ae/ae-06.html#load-packages",
    "title": "Tidy data",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "ae/ae-06.html#goal",
    "href": "ae/ae-06.html#goal",
    "title": "Tidy data",
    "section": "Goal",
    "text": "Goal\nOur ultimate goal in this application exercise is to make the following data visualization."
  },
  {
    "objectID": "ae/ae-06.html#data",
    "href": "ae/ae-06.html#data",
    "title": "Tidy data",
    "section": "Data",
    "text": "Data\nThe data come from the Office of the University Registrar. They make the data available as a table that you can download as a PDF, but I’ve put the data exported in a CSV file for you. Let’s load that in.\n\nlibrary(tidyverse)\n\nstatsci = read_csv(\"data/statsci.csv\")\n\nAnd let’s take a look at the data.\n\nstatsci\n\n# A tibble: 4 × 12\n  degree   `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018` `2019` `2020`\n  <chr>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Statist…     NA      1     NA     NA      4      4      1     NA     NA      1\n2 Statist…      2      2      4      1      3      6      3      4      4      1\n3 Statist…      2      6      1     NA      5      6      6      8      8     17\n4 Statist…      5      9      4     13     10     17     24     21     26     27\n# … with 1 more variable: `2021` <dbl>\n\n\nThe dataset has 4 rows and 12 columns. The first column (variable) is the degree, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major). The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2021.\n\nExercise 1\nTake a look at the plot we aim to make and sketch the data frame we need to make the plot. Determine what each row and each column of the data frame should be. Hint: We need data to be in columns to map to aesthetic elements of the plot.\nAdd your response here."
  },
  {
    "objectID": "ae/ae-06.html#pivoting",
    "href": "ae/ae-06.html#pivoting",
    "title": "Tidy data",
    "section": "Pivoting",
    "text": "Pivoting\n\nDemo: Pivot the statsci data frame longer such that each row represents a degree type / year combination and year and number of graduates for that year are columns in the data frame.\n\n\n# add your code here\n\n\nQuestion: What is the type of the year variable? Why? What should it be?\n\nAdd your response here.\n\nDemo: Start over with pivoting, and this time also make sure year is a numerical variable in the resulting data frame.\n\n\n# add your code here\n\n\nExercise 2\nWhat does an NA mean in this context? Hint: The data come from the university registrar, and they have records on every single graduates, there shouldn’t be anything “unknown” to them about who graduated when.\nAdd your response here.\n\nDemo: Add on to your pipeline that you started with pivoting and convert NAs in n to 0s.\n\n\n# add your code here\n\n\nDemo: In our plot the degree types are BS, BS2, AB, and AB2. This information is in our dataset, in the degree column, but this column also has additional characters we don’t need. Create a new column called degree_type with levels BS, BS2, AB, and AB2 (in this order) based on degree. Do this by adding on to your pipeline from earlier.\n\n\n# add your code here\n\n\n\nExercise 3\nNow we start making our plot, but let’s not get too fancy right away. Create the following plot, which will serve as the “first draft” on the way to our Goal. Do this by adding on to your pipeline from earlier.\n\n\n\n\n\n\n# add your code here\n\n\nWhat aspects of the plot need to be updated to go from the draft you created above to the Goal plot at the beginning of this application exercise.\n\nAdd your response here.\n\nDemo: Update x-axis scale such that the years displayed go from 2011 to 2021 in increments of 2 years. Do this by adding on to your pipeline from earlier.\n\n\n# add your code here\n\n\nDemo: Update line colors using the following level / color assignments. Once again, do this by adding on to your pipeline from earlier.\n\n“BS” = “cadetblue4”\n“BS2” = “cadetblue3”\n“AB” = “lightgoldenrod4”\n“AB2” = “lightgoldenrod3”\n\n\n\n# add your code here\n\n\n\nExercise 4\nUpdate the plot labels (title, subtitle, x, y, and caption) and use theme_minimal(). Once again, do this by adding on to your pipeline from earlier.\n\n# add your code here\n\n\nDemo: Finally, adding to your pipeline you’ve developed so far, move the legend into the plot, make its background white, and its border gray. Set fig-width: 7 and fig-height: 5 for your plot in the chunk options.\n\n\n# add your code here"
  },
  {
    "objectID": "ae/ae-07.html",
    "href": "ae/ae-07.html",
    "title": "Data types and classes",
    "section": "",
    "text": "this ae is due for grade (48 hours from class). To turn in, simply push to GitHub\nhomework 01 due today at 5:00pm"
  },
  {
    "objectID": "ae/ae-07.html#getting-started",
    "href": "ae/ae-07.html#getting-started",
    "title": "Data types and classes",
    "section": "Getting started",
    "text": "Getting started\nClone your ae7-username repo from the GitHub organization."
  },
  {
    "objectID": "ae/ae-07.html#today",
    "href": "ae/ae-07.html#today",
    "title": "Data types and classes",
    "section": "Today",
    "text": "Today\nBy the end of today you will…\n\nlearn how to check the type of a variable\nutilize factors"
  },
  {
    "objectID": "ae/ae-07.html#load-packages",
    "href": "ae/ae-07.html#load-packages",
    "title": "Data types and classes",
    "section": "Load packages",
    "text": "Load packages\nWe will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nscales: For better axis labels.\n\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "ae/ae-07.html#notes",
    "href": "ae/ae-07.html#notes",
    "title": "Data types and classes",
    "section": "Notes",
    "text": "Notes\nA type is how an object is stored in memory. In this course we’ll encounter the following types:\n\nnumeric types:\n\ndouble: a real number stored in double-precision floating point format\ninteger\n\ncharacter strings\nlogical (TRUE/FALSE)\nlists (a heterogeneous collection of the above)\nNULL\n\nSome objects have additional metadata associated with them, called a class. One popular example of a class is a factor. R stores categorical variables as factors.\n\nExample factor\n\nx = factor(c(\"Monday\", \"Friday\", \"Wednesday\"))\nstr(x) # look at the structure of x\n\n Factor w/ 3 levels \"Friday\",\"Monday\",..: 2 1 3\n\nattributes(x) # see metadata\n\n$levels\n[1] \"Friday\"    \"Monday\"    \"Wednesday\"\n\n$class\n[1] \"factor\"\n\nlevels(x) # look at levels of a factor\n\n[1] \"Friday\"    \"Monday\"    \"Wednesday\"\n\n\nThe levels of a factor default to alphabetical order but you can change the order of the levels:\n\nlevels(x) = c(\"Monday\", \"Wednesday\", \"Friday\")\nlevels(x)\n\n[1] \"Monday\"    \"Wednesday\" \"Friday\""
  },
  {
    "objectID": "ae/ae-07.html#type-coercion",
    "href": "ae/ae-07.html#type-coercion",
    "title": "Data types and classes",
    "section": "Type coercion",
    "text": "Type coercion\n\nDemo: Determine the type of the following vector. And then, change the type to numeric.\n\nx = c(\"1\", \"2\", \"3\")\ntypeof(x)\n\n[1] \"character\"\n\nas.numeric(x)\n\n[1] 1 2 3\n\n\nDemo: Once again, determine the type of the following vector. And then, change the type to numeric. What’s different than the previous exercise?\n\ny = c(\"a\", \"b\", \"c\")\n\n# add code here\n\nDemo: Once again, determine the type of the following vector. And then, change the type to numeric. What’s different than the previous exercise?\n\nz = c(\"1\", \"2\", \"three\")\n\n# add code here\n\nDemo: Suppose you conducted a survey where you asked people how many cars their household owns collectively. And the answers are as follows:\n\n\nsurvey_results = tibble(cars = c(1, 2, \"three\"))\nsurvey_results\n\n# A tibble: 3 × 1\n  cars \n  <chr>\n1 1    \n2 2    \n3 three\n\n\nThis is annoying because of that third survey taker types a character string instead of providing a numeric value. So now you need to update the cars variable to be numeric. You do the following\n\nsurvey_results |>\nmutate(cars = as.numeric(cars))\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\n\n# A tibble: 3 × 1\n   cars\n  <dbl>\n1     1\n2     2\n3    NA\n\n\nNow you get a warning NAs introduced by coercion that happened while computing cars = as.numeric(cars) and the response from the third survey taker is now an NA (you lost their data). Fix your mutate() call to avoid this warning.\n\nsurvey_results |>\n  mutate(cars = if_else(cars == \"three\", \"3\", cars),\n         cars = as.numeric(cars))\n\n# A tibble: 3 × 1\n   cars\n  <dbl>\n1     1\n2     2\n3     3\n\n\n\nExercise 1\nFirst, guess the type of the vector. Then, check if you guessed right. I’ve done the first one for you, you’ll see that it’s helpful to check the type of each element of the vector first.\n\nc(1, 1L, \"C\")\n\n\nv1 = c(1, 1L, \"C\")\n\n# to help you guess\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(\"C\")\n\n[1] \"character\"\n\n# to check after you guess\ntypeof(v1)\n\n[1] \"character\"\n\n\n\nv2 = c(1L / 0, \"A\")\n\n-   `c(1:3, 5)`\n\nv3 = c(1:3, 5)\n\n-   `c(3, \"3+\")`\n\nv4 = c(3, \"3+\")\n\n-   `c(NA, TRUE)`\n\nv5 = c(NA, TRUE)"
  },
  {
    "objectID": "ae/ae-07.html#useful-coercion",
    "href": "ae/ae-07.html#useful-coercion",
    "title": "Data types and classes",
    "section": "Useful coercion",
    "text": "Useful coercion\n\nExercise 2\n\ndata(mpg)\n\nRecreate the plot below. Make sure axes and title labels are exactly matching, including spelling, capitalization, etc.\n\n\n\n\n\n\nHint\n\n\n\nYou will need to use as.factor() to cast the appropriate variable as a factor.\n\n\n\n\n# code here"
  },
  {
    "objectID": "ae/ae-07.html#hotel-bookings",
    "href": "ae/ae-07.html#hotel-bookings",
    "title": "Data types and classes",
    "section": "Hotel bookings",
    "text": "Hotel bookings\n\n# From TidyTuesday: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md\n\nhotels = read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\n\nExercise 3\nTake a look at the the following visualization. How are the months ordered? What would be a better order?\n\n\n\n\n\nReorder the months on the x-axis (levels of arrival_date_month) in a way that makes more sense. Use the factor() function to mutate the column into a factor. Read ?factor for help.\n\nhotels |>\n  group_by(hotel, arrival_date_month) |>   # group by hotel type and arrival month\n  summarise(mean_adr = mean(adr), .groups = \"drop\") |>       # calculate mean adr for each group\n  ggplot(aes(\n    x = arrival_date_month,                 # x-axis = arrival_date_month\n    y = mean_adr,                           # y-axis = mean_adr calculated above\n    group = hotel,                          # group lines by hotel type\n    color = hotel)                          # and color by hotel type\n  ) +\n  geom_line() +                             # use lines to represent data\n  theme_minimal() +                         # use a minimal theme\n  labs(\n    x = \"Arrival month\",                 # customize labels\n    y = \"Mean ADR (average daily rate)\",\n    title = \"Comparison of resort and city hotel prices across months\",\n    subtitle = \"Resort hotel prices soar in the summer while ciry hotel prices remain relatively constant throughout the year\",\n    color = \"Hotel type\"\n  ) \n\nOptional extra: Change the y-axis label so the values are shown with dollar signs, e.g. $80 instead of 80. You will want to use a function from the scales package, see https://scales.r-lib.org/reference/index.html for inspiration and help."
  },
  {
    "objectID": "ae/ae-08.html",
    "href": "ae/ae-08.html",
    "title": "Spatial data",
    "section": "",
    "text": "this ae is due for grade (48 hours from class). To turn in, simply push to GitHub\ncheck your ae grades in Sakai\nlab-3 due Friday at 5:00pm\nexam 1 released Friday at 5:00pm\nfind solutions to the practice, labs and aes on Sakai under resources tab"
  },
  {
    "objectID": "ae/ae-08.html#getting-started",
    "href": "ae/ae-08.html#getting-started",
    "title": "Spatial data",
    "section": "Getting started",
    "text": "Getting started\nClone your ae8-username repo from the GitHub organization."
  },
  {
    "objectID": "ae/ae-08.html#today",
    "href": "ae/ae-08.html#today",
    "title": "Spatial data",
    "section": "Today",
    "text": "Today\nBy the end of today you will…\n\nunderstand spatial data frame structure\nbe able to create a visualization from a spatial data frame"
  },
  {
    "objectID": "ae/ae-08.html#load-packages",
    "href": "ae/ae-08.html#load-packages",
    "title": "Spatial data",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(tidyverse)\nlibrary(sf)"
  },
  {
    "objectID": "ae/ae-08.html#notes",
    "href": "ae/ae-08.html#notes",
    "title": "Spatial data",
    "section": "Notes",
    "text": "Notes\nSpatial data is different.\nOur typical “tidy” dataframe.\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# … with 224 more rows\n\n\nA new simple feature object.\n\nnc <- st_read(\"data/nc_regvoters.shp\", quiet = TRUE)\nnc\n\nSimple feature collection with 100 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 10 features:\n      county   dem   rep lib  unaf  male female  total\n1   ALAMANCE 38209 35967 670 35196 44651  54529 110042\n2  ALEXANDER  4772 11750 123  7967 10947  11768  24612\n3  ALLEGHANY  2030  3005  33  2466  3319   3548   7534\n4      ANSON  9130  2858  38  3599  5800   6980  15625\n5       ASHE  4261  8804 102  6232  8609   9525  19399\n6      AVERY  1343  6994  55  3673  5283   5829  12065\n7   BEAUFORT 10883 11873 124  9426 13591  16127  32306\n8     BERTIE  8178  1629  36  2835  5310   6610  12678\n9     BLADEN  9847  5005  77  6784  9472  11227  21713\n10 BRUNSWICK 26797 46557 618 42602 48199  55644 116574\n                         geometry\n1  MULTIPOLYGON (((-79.24619 3...\n2  MULTIPOLYGON (((-81.10889 3...\n3  MULTIPOLYGON (((-81.23989 3...\n4  MULTIPOLYGON (((-79.91995 3...\n5  MULTIPOLYGON (((-81.47276 3...\n6  MULTIPOLYGON (((-81.94135 3...\n7  MULTIPOLYGON (((-77.10377 3...\n8  MULTIPOLYGON (((-76.78307 3...\n9  MULTIPOLYGON (((-78.2615 34...\n10 MULTIPOLYGON (((-78.65572 3...\n\n\n\nExercise 1\nWhat differences do you observe when comparing a typical tidy data frame to the new simple feature object?\n\n\nSimple features\nA simple feature is a standard, formal way to describe how real-world spatial objects (country, building, tree, road, etc) can be represented by a computer.\nThe package sf implements simple features and other spatial functionality using tidy principles. Simple features have a geometry type. Common choices are shown in the slides associated with today’s lecture.\nSimple features are stored in a data frame, with the geographic information in a column called geometry. Simple features can contain both spatial and non-spatial data.\nAll functions in the sf package helpfully begin st_.\n\n\nsf and ggplot\nTo read simple features from a file or database use the function st_read().\n\nnc <- st_read(\"data/nc_regvoters.shp\", quiet = TRUE)\n\nNotice nc contains both spatial and nonspatial information.\nWe can build up a visualization layer-by-layer beginning with ggplot. Let’s start by making a basic plot of North Carolina counties.\n\nnc |>\nggplot() +\n  geom_sf() +\n  labs(title = \"North Carolina counties\")\n\n\n\n\nNow adjust the theme with theme_bw().\n\nggplot(nc) +\n  geom_sf() +\n  labs(title = \"North Carolina counties with theme\") + \n  theme_bw()\n\n\n\n\nNow adjust color in geom_sf to change the color of the county borders.\n\nggplot(nc) +\n  geom_sf(color = \"darkgreen\") +\n  labs(title = \"North Carolina counties with theme and aesthetics\") + \n  theme_bw() \n\n\n\n\nThen increase the width of the county borders using size.\n\nggplot(nc) +\n  geom_sf(color = \"darkgreen\", size = 1.5) +\n  labs(title = \"North Carolina counties with theme and aesthetics\") +\n  theme_bw()\n\n\n\n\nFill the counties by specifying a fill argument.\n\nggplot(nc) +\n  geom_sf(color = \"darkgreen\", size = 1.5, fill = \"orange\") +\n  labs(title = \"North Carolina counties with theme and aesthetics\") +\n  theme_bw()\n\n\n\n\nFinally, adjust the transparency using alpha.\n\nggplot(nc) +\n  geom_sf(color = \"darkgreen\", size = 1.5, fill = \"orange\", alpha = 0.50) +\n  labs(title = \"North Carolina counties with theme and aesthetics\") +\n  theme_bw()\n\n\n\n\n\n\nNorth Carolina Registered Voters\nThe nc data was obtained from the NC Board of Elections website and contains statistics on NC registered voters as of September 4, 2021.\nThe data set contains the following variables on all North Carolina counties, categories provided by the NCSBE:\n\ncounty: county name\ndem: total number registered Democrats\nrep: total number registered Republicans\nlib: total number registered Libertarians\nunaf: total number unaffiliated\nmale: total number male voters\nfemale: total number female voters\ntotal: total number of registered voters in county\ngeometry: geographic coordinates of the county\n\nLet’s use the NCBSE data to generate a choropleth map of the number of registered voters by county.\n\nggplot(nc) +\n  geom_sf(aes(fill = total)) + \n  labs(title = \"Number of Registered Voters by County\",\n       fill = \"# voters\") + \n  theme_bw() \n\n\n\n\nIt is sometimes helpful to pick diverging colors, colorbrewer2 can help.\nOne way to set fill colors is with scale_fill_gradient().\n\nggplot(nc) +\n  geom_sf(aes(fill = total)) +\n  scale_fill_gradient(low = \"#fee8c8\", high = \"#7f0000\") +\n  labs(title = \"The Triangle and Charlotte have the Most Voters\",\n       fill = \"# cases\") + \n  theme_bw() \n\n\n\n\n\n\nChallenges\n\nDifferent types of data exist (raster and vector).\nThe coordinate reference system (CRS) matters.\nManipulating spatial data objects is similar, but not identical to manipulating data frames."
  },
  {
    "objectID": "ae/ae-08.html#dplyr",
    "href": "ae/ae-08.html#dplyr",
    "title": "Spatial data",
    "section": "dplyr",
    "text": "dplyr\nsf objects plays nicely with our earlier data wrangling functions from dplyr.\n\nExample\nMaybe you are interested in the percentage of registered democrats/republicans in a county.\n\nnc |>\n  mutate(pct_dem = dem / total,\n         pct_rep = rep / total) |>\n  select(pct_dem, pct_rep)\n\nSimple feature collection with 100 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 10 features:\n     pct_dem   pct_rep                       geometry\n1  0.3472220 0.3268479 MULTIPOLYGON (((-79.24619 3...\n2  0.1938892 0.4774094 MULTIPOLYGON (((-81.10889 3...\n3  0.2694452 0.3988585 MULTIPOLYGON (((-81.23989 3...\n4  0.5843200 0.1829120 MULTIPOLYGON (((-79.91995 3...\n5  0.2196505 0.4538378 MULTIPOLYGON (((-81.47276 3...\n6  0.1113137 0.5796933 MULTIPOLYGON (((-81.94135 3...\n7  0.3368724 0.3675169 MULTIPOLYGON (((-77.10377 3...\n8  0.6450544 0.1284903 MULTIPOLYGON (((-76.78307 3...\n9  0.4535071 0.2305071 MULTIPOLYGON (((-78.2615 34...\n10 0.2298712 0.3993772 MULTIPOLYGON (((-78.65572 3...\n\n\nGeometries are “sticky”. They are kept until deliberately dropped using st_drop_geometry.\n\nnc |> \n  select(county, total) |> \n  st_drop_geometry()\n\n          county  total\n1       ALAMANCE 110042\n2      ALEXANDER  24612\n3      ALLEGHANY   7534\n4          ANSON  15625\n5           ASHE  19399\n6          AVERY  12065\n7       BEAUFORT  32306\n8         BERTIE  12678\n9         BLADEN  21713\n10     BRUNSWICK 116574\n11      BUNCOMBE 201401\n12         BURKE  57481\n13      CABARRUS 148489\n14      CALDWELL  53537\n15        CAMDEN   7646\n16      CARTERET  52097\n17       CASWELL  15195\n18       CATAWBA 107060\n19       CHATHAM  57602\n20      CHEROKEE  22010\n21        CHOWAN   9685\n22          CLAY   9129\n23     CLEVELAND  66186\n24      COLUMBUS  35646\n25        CRAVEN  68989\n26    CUMBERLAND 201336\n27     CURRITUCK  21189\n28          DARE  30151\n29      DAVIDSON 111819\n30         DAVIE  31265\n31        DUPLIN  30586\n32        DURHAM 228967\n33     EDGECOMBE  33798\n34       FORSYTH 263103\n35      FRANKLIN  47475\n36        GASTON 150351\n37         GATES   8050\n38        GRAHAM   5944\n39     GRANVILLE  39468\n40        GREENE  10565\n41      GUILFORD 366867\n42       HALIFAX  36047\n43       HARNETT  79170\n44       HAYWOOD  45241\n45     HENDERSON  85808\n46      HERTFORD  14308\n47          HOKE  32002\n48          HYDE   3003\n49       IREDELL 129972\n50       JACKSON  28551\n51      JOHNSTON 144074\n52         JONES   6826\n53           LEE  37792\n54        LENOIR  35854\n55       LINCOLN  63412\n56         MACON  26868\n57       MADISON  16636\n58        MARTIN  15977\n59      MCDOWELL  29049\n60   MECKLENBURG 773683\n61      MITCHELL  11004\n62    MONTGOMERY  16821\n63         MOORE  72611\n64          NASH  66185\n65   NEW HANOVER 172138\n66   NORTHAMPTON  13139\n67        ONSLOW 107577\n68        ORANGE 105638\n69       PAMLICO   9157\n70    PASQUOTANK  27127\n71        PENDER  45024\n72    PERQUIMANS   9813\n73        PERSON  27017\n74          PITT 113718\n75          POLK  15772\n76      RANDOLPH  93805\n77      RICHMOND  27216\n78       ROBESON  69785\n79    ROCKINGHAM  60497\n80         ROWAN  95376\n81    RUTHERFORD  45278\n82       SAMPSON  37263\n83      SCOTLAND  20153\n84        STANLY  42752\n85        STOKES  31547\n86         SURRY  46850\n87         SWAIN   9774\n88  TRANSYLVANIA  25854\n89       TYRRELL   2268\n90         UNION 161006\n91         VANCE  28412\n92          WAKE 780519\n93        WARREN  12940\n94    WASHINGTON   8050\n95       WATAUGA  43127\n96         WAYNE  73786\n97        WILKES  43527\n98        WILSON  54424\n99        YADKIN  24494\n100       YANCEY  14197\n\n\n\nExercise 2\n\nConstruct an effective visualization investigating the per county percentage of unaffiliated voters in NC. Use #f7fbff as “low” on the color gradient and #08306b as “high”. Which county has the highest percentage of unaffiliated voters? (You might want to use Google here.)\n\n\n# code here\n\n\nWrite a brief research question that you could answer with this data set and then investigate it here.\n\n\n# code here\n\n\nWhat are limitations of your visualizations above?\n\n\n\n\nAdditional Resources\n\nSimple features in R\nCoordinate references systems\nGeographic data in R"
  },
  {
    "objectID": "labs/lab-0.html",
    "href": "labs/lab-0.html",
    "title": "Lab 0 - Hello R!",
    "section": "",
    "text": "Important\n\n\n\nThis lab is not a part of your grade in this course. You should still submit your completed lab to Gradescope to practice submitting to Gradescope and receive feedback. Since this lab precedes class lecture, you may be unable to complete the lab until next week.\nThis lab will introduce you to the course computing workflow. The main goal is to demo R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\nAn additional goal is to reinforce Git and GitHub, the collaboration and version control system that we will be using throughout the course.\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer. Before we get to that stage, however, you need to build some basic fluency in R. Today we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\nTo make versioning simpler, this and the next lab are solo labs. In the future, you’ll learn about collaborating on GitHub and producing a single lab report for your lab team, but for now, concentrate on getting the basics down.\nBy the end of the lab, you will…"
  },
  {
    "objectID": "labs/lab-0.html#log-in-to-rstudio",
    "href": "labs/lab-0.html#log-in-to-rstudio",
    "title": "Lab 0 - Hello R!",
    "section": "Log in to RStudio",
    "text": "Log in to RStudio\n\nGo to https://cmgr.oit.duke.edu/containers and login with your Duke NetID and Password.\nClick STA198-199 to log into the Docker container. You should now see the RStudio environment.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you haven’t yet done so, you will need to reserve a container for STA198-199 first."
  },
  {
    "objectID": "labs/lab-0.html#set-up-your-ssh-key",
    "href": "labs/lab-0.html#set-up-your-ssh-key",
    "title": "Lab 0 - Hello R!",
    "section": "Set up your SSH key",
    "text": "Set up your SSH key\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n\n\n\n\n\nNote\n\n\n\nYou only need to do this authentication process one time on a single system.\n\n\n\nType credentials::ssh_setup_github() into your console.\nR will ask “No SSH key found. Generate one now?” You should click 1 for yes.\nYou will generate a key. It will begin with “ssh-rsa….” R will then ask “Would you like to open a browser now?” You should click 1 for yes.\nYou may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., sta199).\n\nYou can find more detailed instructions here if you’re interested."
  },
  {
    "objectID": "labs/lab-0.html#configure-git",
    "href": "labs/lab-0.html#configure-git",
    "title": "Lab 0 - Hello R!",
    "section": "Configure Git",
    "text": "Configure Git\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\nTo do so, you will use the use_git_config() function from the usethis package. (And we also need to install a package called gert just for this step.)\nType the following lines of code in the console in RStudio filling in your name and the email address associated with your GitHub account.\n\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n\nFor example, mine would be\n\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Alexander Fisher\", \n  user.email = \"alexander.fisher@duke.edu\"\n  )\n\nYou are now ready interact with GitHub via RStudio!"
  },
  {
    "objectID": "labs/lab-0.html#clone-the-repo-start-new-rstudio-project",
    "href": "labs/lab-0.html#clone-the-repo-start-new-rstudio-project",
    "title": "Lab 0 - Hello R!",
    "section": "Clone the repo & start new RStudio project",
    "text": "Clone the repo & start new RStudio project\n\nGo to the course organization at github.com/sta199-sp23-1 organization on GitHub. Click on the repo with the prefix lab-0. It contains the starter documents you need to complete the lab.\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you’ll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to File ➛ New Project ➛Version Control ➛ Git.\nCopy and paste the URL of your assignment repo into the dialog box Repository URL. Again, please make sure to have SSH highlighted under Clone when you copy the address.\nClick Create Project, and the files from your GitHub repo will be displayed in the Files pane in RStudio.\nClick lab-0-datasaurus.qmd to open the template Quarto file. This is where you will write up your code and narrative for the lab."
  },
  {
    "objectID": "labs/lab-0.html#r-and-r-studio",
    "href": "labs/lab-0.html#r-and-r-studio",
    "title": "Lab 0 - Hello R!",
    "section": "R and R Studio",
    "text": "R and R Studio\nBelow are the components of the RStudio IDE.\n\nBelow are the components of a Quarto (.qmd) file."
  },
  {
    "objectID": "labs/lab-0.html#yaml",
    "href": "labs/lab-0.html#yaml",
    "title": "Lab 0 - Hello R!",
    "section": "YAML",
    "text": "YAML\nThe top portion of your R Markdown file (between the three dashed lines) is called YAML. It stands for “YAML Ain’t Markup Language”. It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n\n\n\n\n\nImportant\n\n\n\nOpen the Quarto (.qmd) file in your project, change the author name to your name, and render the document. Examine the rendered document."
  },
  {
    "objectID": "labs/lab-0.html#committing-changes",
    "href": "labs/lab-0.html#committing-changes",
    "title": "Lab 0 - Hello R!",
    "section": "Committing changes",
    "text": "Committing changes\nNow, go to the Git pane in your RStudio instance. This will be in the top right hand corner in a separate tab.\nIf you have made changes to your Quarto (.qmd) file, you should see it listed here. Click on it to select it in this list and then click on Diff. This shows you the difference between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\nIf you’re happy with these changes, we’ll prepare the changes to be pushed to your remote repository. First, stage your changes by checking the appropriate box on the files you want to prepare. Next, write a meaningful commit message (for instance, “updated author name”) in the Commit message box. Finally, click Commit. Note that every commit needs to have a commit message associated with it.\nYou don’t have to commit after every change, as this would get quite tedious. You should commit states that are meaningful to you for inspection, comparison, or restoration.\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use. As the semester progresses we will let you make these decisions.\nNow let’s make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you’re good to go!"
  },
  {
    "objectID": "labs/lab-0.html#push-changes",
    "href": "labs/lab-0.html#push-changes",
    "title": "Lab 0 - Hello R!",
    "section": "Push changes",
    "text": "Push changes\nNow that you have made an update and committed this change, it’s time to push these changes to your repo on GitHub.\nIn order to push your changes to GitHub, you must have staged your commit to be pushed. click on Push."
  },
  {
    "objectID": "labs/lab-0.html#data-visualization-and-summary",
    "href": "labs/lab-0.html#data-visualization-and-summary",
    "title": "Lab 0 - Hello R!",
    "section": "Data visualization and summary",
    "text": "Data visualization and summary\n\nPlot y vs. x for the dino dataset. Then, calculate the correlation coefficient between x and y for this dataset.\n\nBelow is the code you will need to complete this exercise. Basically, the answer is already given, but you need to include relevant bits in your document and successfully render it and view the results.\nStart with the datasaurus_dozen and pipe it into the filter function to filter for observations where dataset == \"dino\". Store the resulting filtered data frame as a new data frame called dino_data.\n\ndino_data <- datasaurus_dozen |>\n  filter(dataset == \"dino\")\n\nThere is a lot going on here, so let’s slow down and unpack it a bit.\nFirst, the pipe operator: |>, takes what comes before it and sends it as the first argument to what comes after it. So here, we’re saying filter the datasaurus_dozen data frame for observations where dataset == \"dino\".\nSecond, the assignment operator: <-, assigns the name dino_data to the filtered data frame.\nNext, we need to visualize these data. We will use the ggplot function for this. Its first argument is the data you’re visualizing. Next we define the aesthetic mappings. In other words, the columns of the data that get mapped to certain aesthetic features of the plot, e.g. the x axis will represent the variable called x and the y axis will represent the variable called y. Then, we add another layer to this plot where we define which geometric shapes we want to use to represent each observation in the data. In this case we want these to be points, hence geom_point.\n\nggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n  geom_point()\n\nFor the second part of this exercise, we need to calculate a summary statistic: the correlation coefficient. Correlation coefficient, often referred to as \\(r\\) in statistics, measures the linear association between two variables. You will see that some of the pairs of variables we plot do not have a linear relationship between them. This is exactly why we want to visualize first: visualize to assess the form of the relationship, and calculate \\(r\\) only if relevant. In this case, calculating a correlation coefficient really doesn’t make sense since the relationship between x and y is definitely not linear (it’s dinosaurial)!\nFor illustrative purposes only, let’s calculate the correlation coefficient between x and y.\n\n\n\n\n\n\nNote\n\n\n\nStart with `dino_data` and calculate a summary statistic that we will call `r` as the `cor`relation between `x` and `y`.\n\n\n\ndino_data |>\n  summarize(r = cor(x, y))\n\n\nThis is a good place to pause, render, and commit changes with the commit message “Added answer for Ex 2.”\nThen, push these changes when you’re done.\n\n\nPlot y vs. x for the circle dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?\n\n\nThis is another good place to pause, render, and commit changes with the commit message “Added answer for Ex 3.”\nThen, push these changes when you’re done.\n\n\nPlot y vs. x for the star dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?\n\n\nYou should pause again, render, commit changes with the commit message “Added answer for Ex 4”.\nThen, push.\n\nFinally, let’s plot all datasets at once. In order to do this we will make use of faceting, given by the code below:\n\n\n\n\n\n\nNote\n\n\n\nFacet by the dataset variable, placing the plots in a 3 column grid, and don’t add a legend.\n\n\n\nggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n  geom_point()+\n  facet_wrap(~ dataset, ncol = 3) +\n  theme(legend.position = \"none\")\n\nAnd we can use the group_by function to generate all the summary correlation coefficients. We’ll go through these functions next week when we learn about data wrangling.\n\ndatasaurus_dozen |>\n  group_by(dataset) |>\n  summarize(r = cor(x, y)) \n\n\nInclude the faceted plot and the summary of the correlation coefficients in your lab write-up by including relevant code in R chunks (and give them appropriate labels). In the narrative below the code chunks, briefly comment on what you notice about the plots and the correlations between x and y values within each of them (one or two sentences is fine!).\n\nYou’re done with the data analysis exercises, but we’d like to do one more thing to customize the look of the report."
  },
  {
    "objectID": "labs/lab-0.html#resize-your-figures",
    "href": "labs/lab-0.html#resize-your-figures",
    "title": "Lab 0 - Hello R!",
    "section": "Resize your figures",
    "text": "Resize your figures\nWe can customize the output from a particular R chunk by including options in the header that will override any global settings.\n\nIn the R chunks you wrote for Exercises 2-5, customize the settings by modifying the options in the R chunks used to create those figures.\n\nFor Exercises 2, 3, and 4, we want square figures. We can use fig.height and fig.width in the options to adjust the height and width of figures. Modify the chunks in Exercises 2-4 to be as follows:\n\n```{r}\n#| label: ex2-chunk-label\n#| fig-height: 5\n#| fig-width: 5\n\n# Your code that created the figure\n```\n\nFor Exercise 5, modify your figure to have fig-height of 10 and fig-width of 6.\nNow, save and render.\nOnce you’ve created this PDF file, you’re done!\n\nCommit all remaining changes with the commit message “Done with Lab 1!”.\nThen push."
  },
  {
    "objectID": "labs/lab-1.html",
    "href": "labs/lab-1.html",
    "title": "Lab 1 - Data visualization",
    "section": "",
    "text": "Important\n\n\n\nThis lab is due Monday, Jan 30 at 5:00PM ET."
  },
  {
    "objectID": "labs/lab-1.html#packages",
    "href": "labs/lab-1.html#packages",
    "title": "Lab 1 - Data visualization",
    "section": "Packages",
    "text": "Packages\nWe will use the tidyverse package to create and customize plots in R.\n\nlibrary(tidyverse)\nlibrary(viridis)"
  },
  {
    "objectID": "labs/lab-1.html#data-lets-take-a-trip-to-the-midwest",
    "href": "labs/lab-1.html#data-lets-take-a-trip-to-the-midwest",
    "title": "Lab 1 - Data visualization",
    "section": "Data: Let’s take a trip to the Midwest",
    "text": "Data: Let’s take a trip to the Midwest\nThe data in this lab is in the midwest data frame. It is part of the ggplot2 R package, so the midwest data set is automatically loaded when you load the tidyverse package.\nThe data contains demographic characteristics of counties in the Midwest region of the United States.\nBecause the data set is part of the ggplot2 package, you can read documentation for the data set, including variable definitions by typing ?midwest in the console."
  },
  {
    "objectID": "labs/lab-2.html",
    "href": "labs/lab-2.html",
    "title": "Lab 2 - Data wrangling",
    "section": "",
    "text": "Important\n\n\n\nThis lab is due Monday February 6 at 5:00pm."
  },
  {
    "objectID": "labs/lab-2.html#warm-up",
    "href": "labs/lab-2.html#warm-up",
    "title": "Lab 2 - Data wrangling",
    "section": "Warm up",
    "text": "Warm up\nBefore we introduce the data, let’s warm up with some simple exercises.\n\nUpdate the YAML, changing the author name to your name, and render the document.\nCommit your changes with a meaningful commit message.\nPush your changes to GitHub.\nGo to your repo on GitHub and confirm that your changes are visible in your `.qmd and .pdf files. If anything is missing, render, commit, and push again."
  },
  {
    "objectID": "labs/lab-2.html#packages",
    "href": "labs/lab-2.html#packages",
    "title": "Lab 2 - Data wrangling",
    "section": "Packages",
    "text": "Packages\nWe’ll use the tidyverse package for much of the data wrangling. This package is already installed for you. You can load it by running the following in your Console:\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "labs/lab-2.html#data",
    "href": "labs/lab-2.html#data",
    "title": "Lab 2 - Data wrangling",
    "section": "Data",
    "text": "Data\nThe dataset for this assignment can be found as a CSV (comma separated values) file in the data folder of your repository. You can read it in using the following.\n\nnobel <- read_csv(\"data/nobel.csv\")\n\nThe descriptions of the variables are as follows:\n\nid: ID number\nfirstname: First name of laureate\nsurname: Surname\nyear: Year prize won\ncategory: Category of prize\naffiliation: Affiliation of laureate\ncity: City of laureate in prize year\ncountry: Country of laureate in prize year\nborn_date: Birth date of laureate\ndied_date: Death date of laureate\ngender: Gender of laureate\nborn_city: City where laureate was born\nborn_country: Country where laureate was born\nborn_country_code: Code of country where laureate was born\ndied_city: City where laureate died\ndied_country: Country where laureate died\ndied_country_code: Code of country where laureate died\noverall_motivation: Overall motivation for recognition\nshare: Number of other winners award is shared with\nmotivation: Motivation for recognition\n\nIn a few cases the name of the city/country changed after laureate was given (e.g. in 1975 Bosnia and Herzegovina was called the Socialist Federative Republic of Yugoslavia). In these cases the variables below reflect a different name than their counterparts without the suffix _original.\n\nborn_country_original: Original country where laureate was born\nborn_city_original: Original city where laureate was born\ndied_country_original: Original country where laureate died\ndied_city_original: Original city where laureate died\ncity_original: Original city where laureate lived at the time of winning the award\ncountry_original: Original country where laureate lived at the time of winning the award"
  },
  {
    "objectID": "labs/lab-2.html#get-to-know-your-data",
    "href": "labs/lab-2.html#get-to-know-your-data",
    "title": "Lab 2 - Data wrangling",
    "section": "Get to know your data",
    "text": "Get to know your data\n\nHow many observations and how many variables are in the dataset? Use inline code to answer this question. What does each row represent?\n\nThere are some observations in this dataset that we will exclude from our analysis to match the Buzzfeed results.\n\nCreate a new data frame called nobel_living that filters for\n\n\nlaureates for whom country is available\nlaureates who are people as opposed to organizations (organizations are denoted with \"org\" as their gender)\nlaureates who are still alive (their died_date is NA)\n\n\n\n\nConfirm that once you have filtered for these characteristics you are left with a data frame with 228 observations, once again using inline code."
  },
  {
    "objectID": "labs/lab-2.html#most-living-nobel-laureates-were-based-in-the-us-when-they-won-their-prizes",
    "href": "labs/lab-2.html#most-living-nobel-laureates-were-based-in-the-us-when-they-won-their-prizes",
    "title": "Lab 2 - Data wrangling",
    "section": "Most living Nobel laureates were based in the US when they won their prizes",
    "text": "Most living Nobel laureates were based in the US when they won their prizes\n… says the Buzzfeed article. Let’s see if that’s true.\nFirst, we’ll create a new variable to identify whether the laureate was in the US when they won their prize. We’ll use the mutate() function for this. The following pipeline mutates the nobel_living data frame by adding a new variable called country_us. We use an if statement to create this variable. The first argument in the if_else() function we’re using to write this if statement is the condition we’re testing for. If country is equal to \"USA\", we set country_us to \"USA\". If not, we set the country_us to \"Other\".\n\nnobel_living <- nobel_living |>\n  mutate(\n    country_us = if_else(country == \"USA\", \"USA\", \"Other\")\n  )\n\nNext, we will limit our analysis to only the following categories: Physics, Medicine, Chemistry, and Economics.\n\nnobel_living_science <- nobel_living |>\n  filter(category %in% c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\"))\n\nFor the following exercises, work with the nobel_living_science data frame you created above. This means you’ll need to define this data frame in your Quarto document, even though the next exercise doesn’t explicitly ask you to do so.\n\nCreate a faceted bar plot visualizing the relationship between the category of prize and whether the laureate was in the US when they won the nobel prize. Interpret your visualization, and say a few words about whether the Buzzfeed headline is supported by the data.\n\nYour visualization should be faceted by category.\nFor each facet you should have two bars, one for winners in the US and one for Other.\nFlip the coordinates so the bars are horizontal, not vertical.\n\n\n\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "labs/lab-2.html#but-of-those-us-based-nobel-laureates-many-were-born-in-other-countries",
    "href": "labs/lab-2.html#but-of-those-us-based-nobel-laureates-many-were-born-in-other-countries",
    "title": "Lab 2 - Data wrangling",
    "section": "But of those US-based Nobel laureates, many were born in other countries",
    "text": "But of those US-based Nobel laureates, many were born in other countries\n\nCreate a new variable called born_country_us in nobel_living_science that has the value \"USA\" if the laureate is born in the US, and \"Other\" otherwise. How many of the winners are born in the US?\n\n\n\n\n\n\n\nNote\n\n\n\nYou should be able to cheat borrow from code you used earlier to create the country_us variable.\n\n\n\nAdd a second variable to your visualization from Exercise 3 based on whether the laureate was born in the US or not. Create two visualizations with this new variable added:\n\nPlot 1: Segmented frequency bar plot\nPlot 2: Segmented relative frequency bar plot (Hint: Add position = \"fill\" to geom_bar().)\n\nHere are some instructions that apply to both of these visualizations:\n\nYour final visualization should contain a facet for each category.\nWithin each facet, there should be two bars for whether the laureate won the award in the US or not.\nEach bar should have segments for whether the laureate was born in the US or not.\n\nWhich of these visualizations is a better fit for answering the following question: “Do the data appear to support Buzzfeed’s claim that of those US-based Nobel laureates, many were born in other countries?” First, state which plot you’re using to answer the question. Then, answer the question, explaining your reasoning in 1-2 sentences.\n\n\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\n\n\nIn a single pipeline, filter the nobel_living_science data frame for laureates who won their prize in the US, but were born outside of the US, and then create a frequency table (with the count() function) for their birth country (born_country) and arrange the resulting data frame in descending order of number of observations for each country. Which country is the most common?\n\n\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "labs/lab-3.html",
    "href": "labs/lab-3.html",
    "title": "Lab 3 - Data tidying",
    "section": "",
    "text": "Important\n\n\n\nThis lab is due Friday, Feb 10 at 5:00pm."
  },
  {
    "objectID": "labs/lab-3.html#warm-up",
    "href": "labs/lab-3.html#warm-up",
    "title": "Lab 3 - Data tidying",
    "section": "Warm up",
    "text": "Warm up\nBefore we introduce the data, let’s warm up with some simple exercises.\n\nUpdate the YAML, changing the author name to your name, and render the document.\nCommit your changes with a meaningful commit message.\nPush your changes to GitHub.\nGo to your repo on GitHub and confirm that your changes are visible in your `.qmd and .pdf files. If anything is missing, render, commit, and push again."
  },
  {
    "objectID": "labs/lab-3.html#packages",
    "href": "labs/lab-3.html#packages",
    "title": "Lab 3 - Data tidying",
    "section": "Packages",
    "text": "Packages\nWe’ll use the tidyverse package for much of the data wrangling and the scales package for better plot labels. These packages are already installed for you. You can load it by running the following in your Console:\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "labs/lab-3.html#data",
    "href": "labs/lab-3.html#data",
    "title": "Lab 3 - Data tidying",
    "section": "Data",
    "text": "Data\nThe datasets that you will work with in this dataset come from the Organization for Economic Co-Operation and Development (OECD), stats.oecd.org."
  },
  {
    "objectID": "exams/exam1.html",
    "href": "exams/exam1.html",
    "title": "Exam 1",
    "section": "",
    "text": "Important\n\n\n\nFind your exam 1 instructions in the README of your exam1-username repository.\nThe exam is due Tuesday February 14th at 5:00pm!"
  },
  {
    "objectID": "exams/exam1.html#rules",
    "href": "exams/exam1.html#rules",
    "title": "Exam 1",
    "section": "Rules",
    "text": "Rules\n\nThis is an individual assignment.\nYou may not collaborate or communicate anything about this exam to anyone except the instructor or teaching team via a public channel in slack. For example, you may not communicate with other students or post/solicit help on the internet, email or via any other method of communication.\nYou may use R, as well as any notes, books, or existing internet resources to answer exam questions. If you use a resource outside of those we used for class, you should cite it by providing the URL in your rendered PDF.\nYou must cite any code you use as inspiration. A failure to cite is plagiarism. Cite any sources by providing a link to the original source in your exam write-up.\nIf you have questions email the instructor or message in slack. Questions should only be about understanding the data or the exam’s instructions. You may not ask questions on any topics from past assignments or material related to the exam.\nThe instructor will provide code debugging if needed, but this will result in a grade penalty. Note: ask questions early. Questions asked the day the exam is due may not be answered.\n\nWith the exception of major emergencies, late submissions will not be accepted. In the case of a major emergency, you should have your Dean send the instructor or course coordinator sta199@duke.edu an excuse. Start and submit the exam early in order to avoid any last-minute technical issues."
  },
  {
    "objectID": "exams/exam1.html#render-frequently",
    "href": "exams/exam1.html#render-frequently",
    "title": "Exam 1",
    "section": "Render frequently",
    "text": "Render frequently\nRender, commit and push your PDF to GitHub frequently. At least after every exercise.\n\nIf a PDF is not submitted on Gradescope (-10 points). If a PDF is not uploaded to Gradescope by the submission deadline, the PDF at your latest commit prior to the deadline will be used as your submission.\nIf there is no PDF in your repo, i.e., you’ve never rendered your .qmd file, your work will not be graded and you will receive a 0 on the exam."
  },
  {
    "objectID": "exams/exam1.html#academic-integrity",
    "href": "exams/exam1.html#academic-integrity",
    "title": "Exam 1",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nBy taking this exam, you pledge to uphold the Duke Community Standard:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors; and\nI will act if the Standard is compromised."
  },
  {
    "objectID": "prepare/prep9.html",
    "href": "prepare/prep9.html",
    "title": "Prepare",
    "section": "",
    "text": "R4DS: Chp 14 - Numbers (Sections 14.1, 14.2, and 14.4)\nR4DS: Chp 15 - Strings (Sections 15.1 - 15.3)"
  },
  {
    "objectID": "prepare/prep10.html",
    "href": "prepare/prep10.html",
    "title": "Prepare",
    "section": "",
    "text": "R4DS: Chp 8 - Data import\nR4DS: Chp 18 - Dates and times (Sections 18.1 - 18.3)"
  }
]